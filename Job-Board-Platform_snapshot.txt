# Code Repository Snapshot: Job-Board-Platform

--------------------------------------------
Generated with reposnap v1.3.0
Project: https://github.com/akhshyganesh/reposnap#readme
Author: akhshyganesh
Generated on: 7/15/2025 at 7:58:18 PM
--------------------------------------------


📄 README.md
  ---
  
  # 💼 Job Board Platform
  
  The **Job Board Platform** is a full-stack web application that connects employers and job seekers. Employers can post job openings, manage applications, and approve listings. Job seekers can browse, search, and apply for jobs with personalized profiles and application tracking. Admins can oversee and manage the entire system.
  
  Built using **Node.js, Express, Sequelize, PostgreSQL, Node Cron** for the backend, and **React.js, Tailwind CSS, Axios, React Router DOM** for the frontend. Also integrates **Zod** for validation and **JWT-based auth** with **role-based access control**.
  
  ---
  
  ## 📚 Table of Contents
  
  - [Features](#features)
  - [Tech Stack](#tech-stack)
  - [Project Structure](#project-structure)
  - [Getting Started](#getting-started)
  - [Environment Variables](#environment-variables)
  - [Scripts](#scripts)
  - [API Endpoints](#api-endpoints)
  - [Contributing](#contributing)
  - [License](#license)
  - [Contact](#contact)
  
  ---
  
  ## ✨ Features
  
  - 👥 **Authentication & Authorization**
    - JWT-based login/register
    - Role-based access: `admin`, `employer`, `candidate`
  
  - 📝 **Job Listings**
    - Create, edit, delete jobs
    - Search/filter jobs by title, type, salary, location
    - Approve jobs (admin-only)
  
  - 📄 **Applications**
    - Apply with cover letter
    - Prevent duplicate applications
    - View jobs you applied to
  
  - 🧑‍💼 **User Management**
    - Admin can manage all users
    - Employers can see applicants for their jobs
  
  - 📈 **Activity Logging**
    - Logs key actions like creating jobs or applying
  
  - 📦 **Database Seeding**
    - Import `dummyJobs.json` data on server startup (via cron)
  
  ---
  
  ## 🧰 Tech Stack
  
  ### Backend
  
  - Node.js
  - Node Cron
  - Express.js
  - PostgreSQL
  - Sequelize ORM
  - JWT for authentication
  - Zod for validation
  - dotenv for env management
  
  ### Frontend
  
  - React.js
  - Vite
  - Tailwind CSS
  - React Router DOM
  - Axios
  - Zustand (optional)
  - React Hook Form (optional)
  
  ---
  
  ## 🗂 Project Structure
  
  ### 📁 Backend
  
  ```bash
  backend/
  ├── config/
  ├── controllers/
  ├── data/
  ├── logs/
  ├── middleware/
  ├── migrations/
  ├── models/
  ├── routes/
  ├── services/
  ├── utils/
  ├── server.js
  └── .env
  ```
  
  ### 📁 Frontend
  
  ```bash
  frontend/
  ├── public/
  ├── src/
  │   ├── assets/
  │   ├── components/
  │   ├── pages/
  │   ├── services/
  │   ├── context/
  │   ├── hooks/
  │   ├── utils/
  │   ├── App.jsx
  │   └── main.jsx
  ├── tailwind.config.js
  ├── postcss.config.js
  ├── .env
  ├── index.html
  └── vite.config.js
  ```
  
  ---
  
  ## 🚀 Getting Started
  
  ### ✅ Prerequisites
  
  - Node.js v18+
  - PostgreSQL installed and running
  - A PostgreSQL DB named `jobboard`
  
  ---
  
  ### 1️⃣ Clone the Repository
  
  ```bash
  git clone https://github.com/your-username/Job-Board-Platform.git
  cd Job-Board-Platform
  ```
  
  ---
  
  ## 🔐 Environment Variables
  
  ### Backend `.env`
  
  ```env
  PORT=5000
  JWT_SECRET=your_jwt_secret_key
  DATABASE_PASSWORD=your_postgres_password
  DATABASE_URL=your_production_pg_url_if_any
  NODE_ENV=development
  ```
  
  ### Frontend `.env`
  
  ```env
  VITE_API_BASE_URL=http://localhost:5000/api/v1
  ```
  
  ---
  
  ## 📦 Install Dependencies
  
  ### Backend
  
  ```bash
  cd backend
  npm install
  ```
  
  ### Frontend
  
  ```bash
  cd frontend
  npm install
  ```
  
  ---
  
  ## 🔄 Run Migrations
  
  ```bash
  cd backend
  npx sequelize-cli db:migrate
  ```
  
  ---
  
  ## ▶️ Start the App
  
  ### Backend
  
  ```bash
  npm run dev
  ```
  
  ### Frontend
  
  ```bash
  npm run dev
  ```
  
  > Backend: http://localhost:5000  
  > Frontend: http://localhost:5173
  
  ---
  
  ## 📡 API Endpoints
  
  ### 🔐 Auth Routes
  
  | Method | Route | Description |
  |--------|-------|-------------|
  | POST   | `/api/v1/auth/register` | Register a new user |
  | POST   | `/api/v1/auth/login`    | Log in user |
  | GET    | `/api/v1/auth/me`       | Get current logged-in user info |
  
  ### 👤 User Routes
  
  | Method | Route | Description |
  |--------|-------|-------------|
  | GET    | `/api/v1/users`         | Get all users (admin only) |
  | DELETE | `/api/v1/users/:id`     | Delete a user (admin only) |
  
  ### 📄 Job Routes
  
  | Method | Route | Description |
  |--------|-------|-------------|
  | GET    | `/api/v1/jobs`                | Get all jobs |
  | GET    | `/api/v1/jobs/:id`            | Get single job |
  | POST   | `/api/v1/jobs`                | Create a job (employer only) |
  | PUT    | `/api/v1/jobs/:id`            | Update a job |
  | DELETE | `/api/v1/jobs/:id`            | Delete a job |
  | PUT    | `/api/v1/jobs/approve/:id`    | Approve a job (admin only) |
  | GET    | `/api/v1/jobs/applications-count/:id` | Get application count |
  
  ### 📝 Application Routes
  
  | Method | Route | Description |
  |--------|-------|-------------|
  | POST   | `/api/v1/applications`           | Apply for a job |
  | GET    | `/api/v1/applications/user/:id`  | Get user’s job applications |
  | GET    | `/api/v1/applications/job/:id`   | Get applicants for a job (employer only) |
  
  ---
  
  ## 🗃️ Database Models
  
  - **User**
  - **Job**
  - **Application**
  - **ActivityLog**
  
  ---
  
  ## 🤝 Contributing
  
  1. Fork the repo
  2. Create a branch (`git checkout -b feature/my-feature`)
  3. Commit (`git commit -m "feat: add new feature"`)
  4. Push (`git push origin feature/my-feature`)
  5. Open a Pull Request
  
  ---
  
  ## 📄 License
  
  This project is licensed under the [MIT License](LICENSE).
  
  ---
  
  ## 📬 Contact
  
  Open an issue or connect via GitHub if you have any questions, ideas, or feedback.
  
  ---
  
  > Built with ❤️ using Node.js,Node Cron, Express, Sequelize, PostgreSQL, React, and Tailwind CSS.
  
  ---

📁 backend/
  📁 config/
    📄 config.js
      ---
      require('dotenv').config();
      
      module.exports = {
        production: {
          use_env_variable: 'DATABASE_URL',
          dialect: 'postgres',
          dialectOptions: {
            ssl: {
              require: true,
              rejectUnauthorized: false,
            },
          },
        },
      };
      
      ---

    📄 database.js
      ---
      const { Sequelize } = require("sequelize");
      const dotenv = require("dotenv");
      
      dotenv.config();
      
      const env = process.env.NODE_ENV || "development";
      
      let sequelize;
      
      if (env === "production") {
        
        sequelize = new Sequelize(process.env.DATABASE_URL, {
          dialect: "postgres",
          dialectOptions: {
            ssl: {
              require: true,
              rejectUnauthorized: false,
            },
          },
          logging: false,
        });
      } else {
        
        sequelize = new Sequelize({
          database: "jobboard",
          username: "postgres",
          password: process.env.DATABASE_PASSWORD, 
          host: "localhost",
          port: 5432,
          dialect: "postgres",
          logging: false,
        });
      }
      
      module.exports = sequelize;
      
      ---

  📁 controllers/
    📄 applicationController.js
      ---
      const { applicationSchema } = require("../utils/validators");
      const Application = require("../models/Application");
      const Job = require("../models/Job");
      const User = require("../models/User");
      const { logger, logActivity } = require("../services/loggerService");
      
      const createApplication = async (req, res, next) => {
        try {
          const { error } = applicationSchema.safeParse(req.body);
          if (error) throw new Error(error.details[0].message);
      
          const job = await Job.findByPk(req.body.job);
          if (!job) throw new Error("Job not found");
      
          const existingApplication = await Application.findOne({
            where: { userId: req.user.id, jobId: req.body.job },
          });
          if (existingApplication)
            throw new Error("You have already applied for this job");
      
          const application = await Application.create({
            userId: req.user.id,
            jobId: req.body.job,
            coverLetter: req.body.coverLetter,
            status: "accepted",
          });
      
          await logActivity(req.user.id, "apply_job", `Applied to job ${job.title}`);
      
          res.status(201).json({ application, message: "Thank you for submitting your application!" });
        } catch (error) {
          next(error);
        }
      };
      
      const getApplicationsByUser = async (req, res, next) => {
        try {
          const applications = await Application.findAll({
            where: { userId: req.params.userId },
            include: [
              { model: User, as: "candidate", attributes: ["id", "name", "email"] },
              { model: Job, as: "job" },
            ],
          });
      
          res.json({ applications });
        } catch (error) {
          next(error);
        }
      };
      
      const getApplicationsByJob = async (req, res, next) => {
        try {
          const jobId = parseInt(req.params.jobId);
          if (isNaN(jobId)) throw new Error("Invalid job ID");
      
          const job = await Job.findByPk(jobId);
          if (!job) throw new Error("Job not found");
      
         
          logger.info(`Fetching applications for job ${jobId} by user ${req.user.id} (role: ${req.user.role})`);
      
          if (job.userId !== req.user.id && req.user.role !== "admin") {
            throw new Error("Unauthorized");
          }
      
          const applications = await Application.findAll({
            where: { jobId },
            include: [
              { model: User, as: "candidate", attributes: ["id", "name", "email"] },
            ],
          });
      
          logger.info(`Found ${applications.length} applications for job ${jobId}`);
      
          if (applications.length === 0) {
            return res.json({ applications: [], message: "No applications found for this job" });
          }
      
          res.json({ applications });
        } catch (error) {
          next(error);
        }
      };
      
      module.exports = {
        createApplication,
        getApplicationsByUser,
        getApplicationsByJob,
      };
      ---

    📄 authController.js
      ---
      const bcrypt = require("bcryptjs");
      const jwt = require("jsonwebtoken");
      const { User } = require("../models");
      const { loginSchema, registerSchema } = require("../utils/validators");
      
      const generateToken = (id, role) => {
        return jwt.sign({ id, role }, process.env.JWT_SECRET, { expiresIn: "7d" });
      };
      
      const register = async (req, res) => {
        try {
          const result = registerSchema.safeParse(req.body);
          if (!result.success) {
            return res.status(400).json({ message: result.error.errors[0].message });
          }
      
          const { name, email, password, role } = result.data;
      
          const existingUser = await User.findOne({ where: { email } });
          if (existingUser) {
            return res.status(400).json({ message: "User already exists" });
          }
      
          const user = await User.create({
            name,
            email,
            password,
            role,
          });
      
          const token = generateToken(user.id, user.role);
      
          res.status(201).json({
            message: "User created successfully",
            token,
            user: {
              id: user.id,
              name: user.name,
              email: user.email,
              role: user.role,
            },
          });
        } catch (error) {
          res.status(500).json({ message: "Server error", error: error.message });
        }
      };
      
      const login = async (req, res) => {
        try {
          const result = loginSchema.safeParse(req.body);
      
          if (!result.success) {
            return res.status(400).json({ message: result.error.errors[0].message });
          }
      
          const { email, password } = result.data;
      
          const user = await User.findOne({ where: { email } });
          if (!user) {
            return res.status(401).json({ message: "Invalid credentials" });
          }
      
          const isMatch = await bcrypt.compare(password, user.password);
          if (!isMatch) {
            return res.status(401).json({ message: "Invalid credentials" });
          }
      
          const token = generateToken(user.id, user.role);
          res.json({
            message: "Login successful",
            token,
            user: {
              id: user.id,
              name: user.name,
              email: user.email,
              role: user.role,
            },
          });
        } catch (error) {
          res.status(500).json({ message: "Server error", error: error.message });
        }
      };
      
      const getMe = async (req, res) => {
        try {
          const user = await User.findByPk(req.user.id, {
            attributes: { exclude: ["password"] },
          });
      
          if (!user) {
            return res.status(404).json({ message: "User not found" });
          }
      
          res.json({ user });
        } catch (error) {
          res.status(500).json({ message: "Server error", error: error.message });
        }
      };
      
      module.exports = {
        register,
        login,
        getMe,
      };
      
      ---

    📄 jobController.js
      ---
      const { jobSchema } = require("../utils/validators");
      const Job = require("../models/Job");
      const User = require("../models/User");
      const { logger, logActivity } = require("../services/loggerService");
      const { Op } = require("sequelize");
      const fs = require("fs");
      const path = require("path");
      
      const getAllJobs = async (req, res, next) => {
        try {
          const { search, location, jobType, salaryRange, page = 1, limit = 10 } = req.query;
          const offset = (page - 1) * limit;
      
          const where = {};
          if (search) where.title = { [Op.iLike]: `%${search}%` };
          if (location) where.location = location;
          if (jobType) where.jobType = jobType;
          if (salaryRange) {
            const [min, max] = salaryRange.split("-").map(Number);
            where.salary = max ? { [Op.between]: [min, max] } : { [Op.gte]: min };
          }
      
          const jobs = await Job.findAll({
            where,
            // limit: parseInt(limit),
            // offset: parseInt(offset),
            include: [{ model: User, as: "employer", attributes: ["id", "name"] }],
          });
      
          res.json({ jobs });
        } catch (error) {
          next(error);
        }
      };
      
      const getJobById = async (req, res, next) => {
        try {
          const job = await Job.findByPk(req.params.id, {
            include: [{ model: User, as: "employer", attributes: ["id", "name"] }],
          });
          if (!job) throw new Error("Job not found");
      
          res.json({ job });
        } catch (error) {
          next(error);
        }
      };
      
      const createJob = async (req, res, next) => {
        try {
          const jobsFilePath = path.join(__dirname, '../data/dummyjobs.json')
          const result = jobSchema.safeParse(req.body);
          if (!result.success) throw new Error(result.error.errors[0].message);
      
          // Step 2: Append job to JSON
          const jobData = { ...req.body, userId: req.user.id };
          let jobs = [];
      
          if (fs.existsSync(jobsFilePath)) {
            jobs = JSON.parse(fs.readFileSync(jobsFilePath, 'utf-8'));
          }
      
          jobs.push(jobData);
          fs.writeFileSync(jobsFilePath, JSON.stringify(jobs, null, 2));
      
          // Step 3: Insert into DB
          const job = await Job.create(jobData);
      
          // Step 4: Log activity (optional)
          await logActivity(req.user.id, 'create_job', `Job "${job.title}" created`);
      
          res.status(201).json({ success: true, job });
        } catch (error) {
          next(error);
        }
      };
      
      const updateJob = async (req, res, next) => {
        try {
          const result = jobSchema.safeParse(req.body);
          if (!result.success) throw new Error(result.error.errors[0].message);
      
          const job = await Job.findByPk(req.params.id);
          if (!job) throw new Error("Job not found");
          if (job.userId !== req.user.id && req.user.role !== "admin")
            throw new Error("Unauthorized");
      
          await job.update(req.body);
          await logActivity(req.user.id, "update_job", `Job ${job.title} updated`);
      
          res.json({ job });
        } catch (error) {
          next(error);
        }
      };
      
      const deleteJob = async (req, res, next) => {
        try {
          const job = await Job.findByPk(req.params.id);
          if (!job) throw new Error("Job not found");
          if (job.userId !== req.user.id && req.user.role !== "admin")
            throw new Error("Unauthorized");
      
          await job.destroy();
          await logActivity(req.user.id, "delete_job", `Job ${job.title} deleted`);
      
          res.status(204).send();
        } catch (error) {
          next(error);
        }
      };
      
      const approveJob = async (req, res, next) => {
        try {
          const job = await Job.findByPk(req.params.id);
          if (!job) throw new Error("Job not found");
          if (job.status === "approved") throw new Error("Job already approved");
      
          await job.update({ status: "approved" });
          await logActivity(req.user.id, "approve_job", `Job ${job.title} approved`);
      
          res.json({ job });
        } catch (error) {
          next(error);
        }
      };
      
      const getJobApplicationsCount = async (req, res, next) => {
        try {
          const job = await Job.findByPk(req.params.id);
          if (!job) throw new Error("Job not found");
          if (job.userId !== req.user.id && req.user.role !== "admin")
            throw new Error("Unauthorized");
      
          const count = await Application.count({
            where: { jobId: req.params.id },
          });
      
          res.json({ count });
        } catch (error) {
          next(error);
        }
      };
      
      const seedJobs = async (req, res, next) => {
        try {
          const dummyJobsPath = path.join(__dirname, "../data/dummyJobs.json");
          const dummyJobsData = await fs.readFile(dummyJobsPath, "utf-8");
          const dummyJobs = JSON.parse(dummyJobsData);
      
          for (const jobData of dummyJobs) {
            const result = jobSchema.safeParse(jobData);
            if (!result.success) {
              console.error(`Validation error for job ${jobData.title}:`, result.error.errors);
              continue;
            }
      
            const existingJob = await Job.findOne({
              where: { title: jobData.title, company: jobData.company },
            });
      
            if (!existingJob) {
              await Job.create(jobData);
            }
          }
      
          await logActivity(req.user.id, "seed_jobs", "Dummy jobs seeded into database");
          res.status(200).json({ message: "Dummy jobs seeded successfully" });
        } catch (error) {
          next(error);
        }
      };
      
      module.exports = {
        getAllJobs,
        getJobById,
        createJob,
        updateJob,
        deleteJob,
        approveJob,
        getJobApplicationsCount,
        seedJobs,
      };
      ---

    📄 userController.js
      ---
      const User = require("../models/User");
      const { logger } = require("../services/loggerService");
      
      const getAllUsers = async (req, res, next) => {
        try {
          const users = await User.findAll({
            attributes: ["id", "name", "email", "role"],
          });
          res.json({ users });
        } catch (error) {
          next(error);
        }
      };
      
      const deleteUser = async (req, res, next) => {
        try {
          const user = await User.findByPk(req.params.id);
          if (!user) throw new Error("User not found");
      
          await user.destroy();
          await logger.logActivity(
            req.user.id,
            "delete_user",
            `User ${user.email} deleted`
          );
      
          res.status(204).send();
        } catch (error) {
          next(error);
        }
      };
      
      module.exports = {
        getAllUsers,
        deleteUser,
      };
      
      ---

  📄 cron-runner.js
    ---
    const { scheduleCronJobs } = require('./services/cron-job');
    const sequelize = require('./config/database');
    
    (async () => {
      try {
        await sequelize.authenticate();
        console.log("Connected to DB");
        scheduleCronJobs();
      } catch (err) {
        console.error("DB connection failed", err);
      }
    })();
    
    ---

  📁 data/
    📄 dummyJobs.json
      ---
      [
        {
          "title": "Software Engineer",
          "company": "TechCorp",
          "description": "Develop and maintain web applications using modern technologies.",
          "location": "Bangalore",
          "salary": 800000,
          "jobType": "full-time",
          "requirements": "3+ years experience in JavaScript, React, Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Data Analyst",
          "company": "DataWorks",
          "description": "Analyze large datasets to provide business insights.",
          "location": "Mumbai",
          "salary": 600000,
          "jobType": "full-time",
          "requirements": "Proficiency in Python, SQL, and Tableau",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Product Manager",
          "company": "Innovate Inc",
          "description": "Lead product development and strategy for SaaS products.",
          "location": "Delhi",
          "salary": 1200000,
          "jobType": "full-time",
          "requirements": "5+ years in product management, agile methodologies",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "UX Designer",
          "company": "DesignHub",
          "description": "Create user-friendly interfaces for mobile and web apps.",
          "location": "Hyderabad",
          "salary": 900000,
          "jobType": "remote",
          "requirements": "Experience with Figma, Adobe XD, and user testing",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "DevOps Engineer",
          "company": "CloudNet",
          "description": "Manage CI/CD pipelines and cloud infrastructure.",
          "location": "Pune",
          "salary": 1000000,
          "jobType": "full-time",
          "requirements": "Expertise in AWS, Docker, Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Backend Developer",
          "company": "TechTrend",
          "description": "Build scalable APIs and microservices.",
          "location": "Chennai",
          "salary": 850000,
          "jobType": "full-time",
          "requirements": "Node.js, Express, MongoDB experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Frontend Developer",
          "company": "WebWorks",
          "description": "Develop responsive web interfaces.",
          "location": "Kolkata",
          "salary": 750000,
          "jobType": "remote",
          "requirements": "React, TypeScript, CSS expertise",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Full Stack Developer",
          "company": "CodeZap",
          "description": "Work on both frontend and backend systems.",
          "location": "Ahmedabad",
          "salary": 950000,
          "jobType": "full-time",
          "requirements": "MERN stack, 4+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "QA Engineer",
          "company": "QualityAssure",
          "description": "Ensure product quality through automated testing.",
          "location": "Bangalore",
          "salary": 700000,
          "jobType": "full-time",
          "requirements": "Selenium, Jest, 3+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Mobile Developer",
          "company": "AppCraft",
          "description": "Develop cross-platform mobile applications.",
          "location": "Mumbai",
          "salary": 900000,
          "jobType": "remote",
          "requirements": "Flutter, React Native experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Security Analyst",
          "company": "SecureNet",
          "description": "Monitor and protect systems from cyber threats.",
          "location": "Delhi",
          "salary": 1100000,
          "jobType": "full-time",
          "requirements": "CISSP, penetration testing experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Cloud Architect",
          "company": "CloudPeak",
          "description": "Design cloud-based solutions for enterprise clients.",
          "location": "Hyderabad",
          "salary": 1500000,
          "jobType": "full-time",
          "requirements": "AWS, Azure, 6+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "AI Engineer",
          "company": "AIInnovations",
          "description": "Develop machine learning models for predictive analytics.",
          "location": "Pune",
          "salary": 1300000,
          "jobType": "full-time",
          "requirements": "Python, TensorFlow, 4+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Database Administrator",
          "company": "DataCore",
          "description": "Manage and optimize database systems.",
          "location": "Chennai",
          "salary": 800000,
          "jobType": "full-time",
          "requirements": "SQL Server, Oracle, 5+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Network Engineer",
          "company": "NetConnect",
          "description": "Maintain enterprise network infrastructure.",
          "location": "Kolkata",
          "salary": 850000,
          "jobType": "full-time",
          "requirements": "CCNA, 3+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Business Analyst",
          "company": "GrowEasy",
          "description": "Analyze business processes and propose solutions.",
          "location": "Ahmedabad",
          "salary": 900000,
          "jobType": "full-time",
          "requirements": "CBAP, 4+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Scrum Master",
          "company": "AgileWorks",
          "description": "Facilitate agile development processes.",
          "location": "Bangalore",
          "salary": 1100000,
          "jobType": "full-time",
          "requirements": "CSM certification, 3+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Marketing Manager",
          "company": "BrandBoost",
          "description": "Develop and execute marketing strategies.",
          "location": "Mumbai",
          "salary": 950000,
          "jobType": "full-time",
          "requirements": "Digital marketing, 5+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "HR Specialist",
          "company": "PeopleFirst",
          "description": "Manage recruitment and employee relations.",
          "location": "Delhi",
          "salary": 700000,
          "jobType": "full-time",
          "requirements": "SHRM certification, 3+ years experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Content Writer",
          "company": "WriteWell",
          "description": "Create engaging content for digital platforms.",
          "location": "Hyderabad",
          "salary": 600000,
          "jobType": "remote",
          "requirements": "SEO, copywriting experience",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Acupuncturist Specialist",
          "company": "Jones Inc",
          "description": "Skill soon large rich purpose best seek though account early question often him.",
          "location": "Bangalore",
          "salary": 876695,
          "jobType": "remote",
          "requirements": "2+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Advice Consultant",
          "company": "Coleman Group",
          "description": "Avoid stay better involve president political style health prove.",
          "location": "Kolkata",
          "salary": 869609,
          "jobType": "remote",
          "requirements": "5+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Engineer, Architect",
          "company": "Nguyen PLC",
          "description": "Many person she various crime partner wind catch animal sea spring everything.",
          "location": "Ahmedabad",
          "salary": 842351,
          "jobType": "remote",
          "requirements": "3+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Teacher, Developer",
          "company": "Lee Ltd",
          "description": "Need particularly plant much play song glass body agency pretty dream.",
          "location": "Delhi",
          "salary": 811816,
          "jobType": "remote",
          "requirements": "2+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Leisure Administrator",
          "company": "Hall-Evans",
          "description": "Realize argue think others new language when artist all argue outside air forward man.",
          "location": "Pune",
          "salary": 1433173,
          "jobType": "full-time",
          "requirements": "3+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Journalist, Consultant",
          "company": "West-Garcia",
          "description": "Happen yard figure difficult generation moment condition.",
          "location": "Kolkata",
          "salary": 1385700,
          "jobType": "full-time",
          "requirements": "5+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Legal Specialist",
          "company": "Woodward-Robinson",
          "description": "Also wait certainly against never loss section far available report process image follow answer eight.",
          "location": "Pune",
          "salary": 1471548,
          "jobType": "full-time",
          "requirements": "2+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Air Administrator",
          "company": "Gonzalez-Jefferson",
          "description": "Security decision least arm determine laugh for floor miss kind success Mr.",
          "location": "Chennai",
          "salary": 925617,
          "jobType": "full-time",
          "requirements": "5+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Tax Administrator",
          "company": "Stein Group",
          "description": "Important wall there goal father eat great detail fly.",
          "location": "Pune",
          "salary": 701617,
          "jobType": "remote",
          "requirements": "4+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Catering Consultant",
          "company": "Barry-Bauer",
          "description": "Now over social little perhaps sea ready quite physical manage technology purpose Democrat girl theory.",
          "location": "Chennai",
          "salary": 1522135,
          "jobType": "remote",
          "requirements": "6+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Logistics Administrator",
          "company": "Nelson, Smith and Berg",
          "description": "Company that girl kid large like air know couple.",
          "location": "Chennai",
          "salary": 1280269,
          "jobType": "remote",
          "requirements": "5+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Production Developer",
          "company": "Jordan-Farmer",
          "description": "How authority ability rule onto too of ago specific environmental account me message item process.",
          "location": "Chennai",
          "salary": 1495503,
          "jobType": "full-time",
          "requirements": "4+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Therapist, Manager",
          "company": "Ross-Delgado",
          "description": "Dream choose simple home would race they nothing smile ball send really such occur start tonight.",
          "location": "Hyderabad",
          "salary": 1223305,
          "jobType": "remote",
          "requirements": "7+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Research Analyst",
          "company": "Hess, Hodges and Allen",
          "description": "Middle only these suffer health expert body fill manager.",
          "location": "Kolkata",
          "salary": 800930,
          "jobType": "full-time",
          "requirements": "6+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Audiological Administrator",
          "company": "Silva, Martinez and Richardson",
          "description": "Tell woman keep kid walk able travel wall media few.",
          "location": "Pune",
          "salary": 758902,
          "jobType": "remote",
          "requirements": "5+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Clinical Specialist",
          "company": "Tran-Byrd",
          "description": "Effort open white purpose simple middle local least message remain.",
          "location": "Mumbai",
          "salary": 1348750,
          "jobType": "full-time",
          "requirements": "6+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Tax Engineer",
          "company": "Contreras, Peters and Zhang",
          "description": "Cold late magazine wait reach line run happy peace suggest decision.",
          "location": "Kolkata",
          "salary": 708922,
          "jobType": "full-time",
          "requirements": "6+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Research Manager",
          "company": "Davis Inc",
          "description": "Pay both evening appear history peace now.",
          "location": "Bangalore",
          "salary": 920944,
          "jobType": "full-time",
          "requirements": "4+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Radio Architect",
          "company": "Randall Ltd",
          "description": "Station decision realize lot mean situation home teach enter themselves step process.",
          "location": "Kolkata",
          "salary": 914281,
          "jobType": "remote",
          "requirements": "3+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Publishing Administrator",
          "company": "Gomez Inc",
          "description": "Big campaign few return find leave ready.",
          "location": "Hyderabad",
          "salary": 1556154,
          "jobType": "remote",
          "requirements": "3+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Geoscientist Analyst",
          "company": "Norton, Cruz and Wade",
          "description": "Free government hot free view hot threat generation.",
          "location": "Mumbai",
          "salary": 1110141,
          "jobType": "full-time",
          "requirements": "2+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Scientist, Engineer",
          "company": "Castro-Weber",
          "description": "Himself show nearly clear court make war town style team experience.",
          "location": "Hyderabad",
          "salary": 986212,
          "jobType": "remote",
          "requirements": "7+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Primary Manager",
          "company": "Robinson, Lambert and Green",
          "description": "Since debate stage believe generation Democrat police future work factor.",
          "location": "Ahmedabad",
          "salary": 1309338,
          "jobType": "full-time",
          "requirements": "5+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Garment/textile Manager",
          "company": "Mcdonald-Williams",
          "description": "Player call beautiful remain already note above never travel west protect already commercial field.",
          "location": "Kolkata",
          "salary": 1128896,
          "jobType": "remote",
          "requirements": "2+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Production Administrator",
          "company": "Best-Bridges",
          "description": "Sing development sing indeed challenge professional wife out research.",
          "location": "Hyderabad",
          "salary": 636413,
          "jobType": "full-time",
          "requirements": "3+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Oceanographer Specialist",
          "company": "Russell, Stevenson and Alexander",
          "description": "Threat newspaper upon thank responsibility kid entire.",
          "location": "Chennai",
          "salary": 1564798,
          "jobType": "remote",
          "requirements": "4+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Structural Consultant",
          "company": "Crawford, Rivera and Watson",
          "description": "Kitchen star audience life table miss history response.",
          "location": "Ahmedabad",
          "salary": 1399891,
          "jobType": "full-time",
          "requirements": "4+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Engineer, Architect",
          "company": "Clark-Foley",
          "description": "Cost suddenly people story major within everybody produce final thank class Mr ask land especially.",
          "location": "Pune",
          "salary": 1179191,
          "jobType": "full-time",
          "requirements": "3+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Film/video Architect",
          "company": "White, Martin and Allison",
          "description": "Contain very thousand best suggest this thank data instead hear TV pattern for party instead.",
          "location": "Chennai",
          "salary": 1308490,
          "jobType": "full-time",
          "requirements": "6+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Musician Manager",
          "company": "Henderson, Lutz and Hickman",
          "description": "Near important after use buy specific key speak Mrs describe sea mention its arrive.",
          "location": "Mumbai",
          "salary": 1177864,
          "jobType": "remote",
          "requirements": "5+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Manufacturing Manager",
          "company": "Phillips-Waller",
          "description": "Top recently morning collection sound take nation other good.",
          "location": "Delhi",
          "salary": 917125,
          "jobType": "remote",
          "requirements": "5+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Museum/gallery Manager",
          "company": "Peck and Sons",
          "description": "Inside station factor special alone list admit share stage spend.",
          "location": "Mumbai",
          "salary": 837594,
          "jobType": "remote",
          "requirements": "3+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Geologist, Engineer",
          "company": "Stephens Ltd",
          "description": "Behavior phone later lay find both hope pick where hospital factor happy among when even.",
          "location": "Hyderabad",
          "salary": 1503590,
          "jobType": "full-time",
          "requirements": "3+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Librarian, Engineer",
          "company": "Ross-Galvan",
          "description": "Green near behavior center door blood measure sing heart past thus three.",
          "location": "Mumbai",
          "salary": 934621,
          "jobType": "full-time",
          "requirements": "7+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Insurance Architect",
          "company": "Mills, Andersen and Taylor",
          "description": "Clearly trade she across represent color interview offer she ok page.",
          "location": "Pune",
          "salary": 1484654,
          "jobType": "full-time",
          "requirements": "6+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Radio Manager",
          "company": "Herring, Smith and Levy",
          "description": "Toward car green provide ahead throw later wall yes buy.",
          "location": "Delhi",
          "salary": 1258070,
          "jobType": "remote",
          "requirements": "5+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Production Specialist",
          "company": "Smith PLC",
          "description": "Continue them arm foot allow crime both keep fast really ball parent nature.",
          "location": "Chennai",
          "salary": 1420573,
          "jobType": "remote",
          "requirements": "7+ years experience in SQL",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Quality Specialist",
          "company": "Moreno Group",
          "description": "Star choice activity nothing that card game respond total body town speech thank.",
          "location": "Pune",
          "salary": 1506170,
          "jobType": "full-time",
          "requirements": "5+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Exhibitions Specialist",
          "company": "Graham-Hernandez",
          "description": "Recently never accept account reflect community energy.",
          "location": "Pune",
          "salary": 1226737,
          "jobType": "remote",
          "requirements": "2+ years experience in Python",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Petroleum Administrator",
          "company": "Vargas and Sons",
          "description": "Kitchen policy relationship enough his station charge source certainly team maybe citizen thing.",
          "location": "Chennai",
          "salary": 1326492,
          "jobType": "full-time",
          "requirements": "6+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Emergency Manager",
          "company": "Thomas-Murray",
          "description": "Situation stuff town serious week address operation manage poor rate keep authority someone market officer.",
          "location": "Chennai",
          "salary": 1533481,
          "jobType": "remote",
          "requirements": "4+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Scientist, Analyst",
          "company": "Anthony Group",
          "description": "Cause medical lose street customer there right myself someone each media.",
          "location": "Mumbai",
          "salary": 823139,
          "jobType": "remote",
          "requirements": "4+ years experience in SQL",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Museum/gallery Manager",
          "company": "Alvarez, Ruiz and Fitzpatrick",
          "description": "Glass rate kitchen last notice toward than available.",
          "location": "Mumbai",
          "salary": 775145,
          "jobType": "remote",
          "requirements": "5+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Teaching Engineer",
          "company": "Turner-Gilbert",
          "description": "Stand lose significant member among bad indeed art before.",
          "location": "Pune",
          "salary": 660315,
          "jobType": "remote",
          "requirements": "6+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Fitness Administrator",
          "company": "Davis, Robinson and Morgan",
          "description": "Carry more much their they program operation remember southern although employee better real reflect member.",
          "location": "Bangalore",
          "salary": 1575239,
          "jobType": "remote",
          "requirements": "4+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Pharmacist, Administrator",
          "company": "Hurley-Smith",
          "description": "Democrat ahead cup agency model water author rich picture father bring information.",
          "location": "Delhi",
          "salary": 1261473,
          "jobType": "remote",
          "requirements": "2+ years experience in SQL",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Further Analyst",
          "company": "Humphrey, Cooper and Lawrence",
          "description": "East if why stop positive operation coach blood.",
          "location": "Kolkata",
          "salary": 622897,
          "jobType": "remote",
          "requirements": "6+ years experience in Node.js",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Systems Developer",
          "company": "Stone Group",
          "description": "Because since necessary religious capital expect live instead debate.",
          "location": "Delhi",
          "salary": 661926,
          "jobType": "remote",
          "requirements": "5+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Engineer, Consultant",
          "company": "Glover, Clements and Carter",
          "description": "Election young in represent century among huge true culture program feel myself image else best.",
          "location": "Delhi",
          "salary": 1080850,
          "jobType": "full-time",
          "requirements": "3+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Microbiologist Analyst",
          "company": "Freeman, Davis and Rodriguez",
          "description": "Letter fight attention voice because else age serious agreement conference budget consumer big method.",
          "location": "Delhi",
          "salary": 1054165,
          "jobType": "remote",
          "requirements": "7+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Paediatric Administrator",
          "company": "Washington Inc",
          "description": "Minute for treatment in himself sister history star then because while husband door.",
          "location": "Ahmedabad",
          "salary": 1142469,
          "jobType": "full-time",
          "requirements": "3+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Cartographer Architect",
          "company": "Ortiz, Mccullough and Oneal",
          "description": "Minute often reduce about population down learn of produce be behind.",
          "location": "Delhi",
          "salary": 1441090,
          "jobType": "full-time",
          "requirements": "6+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Pharmacist, Architect",
          "company": "Davis-Thomas",
          "description": "Protect identify discuss risk call each ten oil body role history become size science.",
          "location": "Kolkata",
          "salary": 1191921,
          "jobType": "remote",
          "requirements": "3+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Estate Manager",
          "company": "Grant Inc",
          "description": "Technology early court middle war offer occur no arrive employee.",
          "location": "Bangalore",
          "salary": 1583290,
          "jobType": "full-time",
          "requirements": "7+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Visual Administrator",
          "company": "Phillips Group",
          "description": "Prove drop suggest democratic return follow nearly per win much home certainly.",
          "location": "Kolkata",
          "salary": 1528680,
          "jobType": "remote",
          "requirements": "4+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Museum Consultant",
          "company": "Adams-Howell",
          "description": "My push letter about light ask know environmental camera.",
          "location": "Delhi",
          "salary": 919378,
          "jobType": "full-time",
          "requirements": "7+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Development Specialist",
          "company": "Rivera-Brown",
          "description": "Peace piece day build water just myself stay.",
          "location": "Chennai",
          "salary": 764661,
          "jobType": "full-time",
          "requirements": "7+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Chief Engineer",
          "company": "Dixon-Walters",
          "description": "Up challenge point young develop recent hit what one.",
          "location": "Hyderabad",
          "salary": 895340,
          "jobType": "remote",
          "requirements": "4+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Librarian, Architect",
          "company": "Perez, Gross and Mendez",
          "description": "Leave eight weight foot green where feel its picture activity.",
          "location": "Bangalore",
          "salary": 1141042,
          "jobType": "full-time",
          "requirements": "7+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Embryologist, Administrator",
          "company": "Collins-Burgess",
          "description": "Song college rather society whole science trial different prevent receive within bill.",
          "location": "Kolkata",
          "salary": 1454376,
          "jobType": "full-time",
          "requirements": "6+ years experience in Azure",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Quantity Developer",
          "company": "Mckinney-Nguyen",
          "description": "Agency toward statement how official receive sport source lose.",
          "location": "Bangalore",
          "salary": 1427929,
          "jobType": "remote",
          "requirements": "6+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Lecturer, Manager",
          "company": "Harrison, Jackson and Mckee",
          "description": "Customer great southern piece certain water either list goal Democrat.",
          "location": "Kolkata",
          "salary": 1013954,
          "jobType": "full-time",
          "requirements": "7+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Engineer, Analyst",
          "company": "Harper-Garcia",
          "description": "Many wall agency American so citizen like dream create so none nothing woman toward.",
          "location": "Chennai",
          "salary": 1095791,
          "jobType": "remote",
          "requirements": "4+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Architectural Consultant",
          "company": "Kline, Pierce and Williams",
          "description": "Spring level which human kind image enough perhaps.",
          "location": "Hyderabad",
          "salary": 1390245,
          "jobType": "remote",
          "requirements": "3+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Health Engineer",
          "company": "Banks, Allen and Greene",
          "description": "Feeling true next raise from can kid poor nice over with.",
          "location": "Pune",
          "salary": 1268185,
          "jobType": "remote",
          "requirements": "6+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Optometrist Consultant",
          "company": "Booth Group",
          "description": "Must yes yet prepare per bit thought history husband mention watch growth head look.",
          "location": "Delhi",
          "salary": 1223750,
          "jobType": "full-time",
          "requirements": "2+ years experience in Kubernetes",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Surveyor, Developer",
          "company": "Lee, Peterson and Green",
          "description": "And beautiful measure center open just mean glass reality remain sit nice wind.",
          "location": "Hyderabad",
          "salary": 1594953,
          "jobType": "full-time",
          "requirements": "3+ years experience in SQL",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Restaurant Engineer",
          "company": "Martin, Best and Moss",
          "description": "Build statement century manage reflect together happy.",
          "location": "Hyderabad",
          "salary": 1145688,
          "jobType": "full-time",
          "requirements": "5+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Teacher, Administrator",
          "company": "Decker, Thomas and Medina",
          "description": "Store material usually require part by receive truth program season.",
          "location": "Delhi",
          "salary": 826324,
          "jobType": "remote",
          "requirements": "7+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Phytotherapist Developer",
          "company": "Evans, Smith and Buckley",
          "description": "Coach fall forward although safe picture man decision fund current message agree.",
          "location": "Mumbai",
          "salary": 1245635,
          "jobType": "remote",
          "requirements": "7+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Chiropractor Architect",
          "company": "Irwin Inc",
          "description": "Stage section suggest only soldier high glass cup system.",
          "location": "Bangalore",
          "salary": 834639,
          "jobType": "remote",
          "requirements": "5+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Science Developer",
          "company": "Carpenter Group",
          "description": "Animal specific describe opportunity current upon design street foreign bank later.",
          "location": "Delhi",
          "salary": 1326957,
          "jobType": "full-time",
          "requirements": "3+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Production Architect",
          "company": "Mccall-Diaz",
          "description": "Car area fire learn force himself ask process.",
          "location": "Chennai",
          "salary": 830326,
          "jobType": "remote",
          "requirements": "7+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Waste Analyst",
          "company": "Tucker-Nelson",
          "description": "Stand myself value relate far race meeting forget difference if.",
          "location": "Pune",
          "salary": 778998,
          "jobType": "full-time",
          "requirements": "6+ years experience in AWS",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Engineer, Consultant",
          "company": "Matthews, Walker and Vazquez",
          "description": "Standard never public rest economy fill court standard yes upon about address.",
          "location": "Bangalore",
          "salary": 1475434,
          "jobType": "full-time",
          "requirements": "6+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Further Administrator",
          "company": "Brown, Wade and Lawson",
          "description": "Chance above than pass during action program piece.",
          "location": "Mumbai",
          "salary": 651212,
          "jobType": "full-time",
          "requirements": "4+ years experience in GCP",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Journalist, Developer",
          "company": "Diaz-Dennis",
          "description": "Degree value fear chair treat away look instead.",
          "location": "Chennai",
          "salary": 719478,
          "jobType": "remote",
          "requirements": "2+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Conservation Administrator",
          "company": "Howard-Smith",
          "description": "Operation and fall I talk option explain marriage shake home statement.",
          "location": "Mumbai",
          "salary": 892476,
          "jobType": "remote",
          "requirements": "5+ years experience in Java",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Chartered Developer",
          "company": "Robbins-Gonzalez",
          "description": "Charge sense relationship today approach should scientist.",
          "location": "Ahmedabad",
          "salary": 932947,
          "jobType": "remote",
          "requirements": "5+ years experience in React",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Multimedia Manager",
          "company": "Brock, Mcneil and Cummings",
          "description": "Like down investment ten since writer north doctor action return attorney thing again compare.",
          "location": "Ahmedabad",
          "salary": 744095,
          "jobType": "full-time",
          "requirements": "2+ years experience in Docker",
          "status": "pending",
          "userId": "550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "title": "Mern Stack Developer",
          "company": "F22 Labs",
          "description": "F22Labs GLOBAL – Building Startups, Powering Innovation.\n\nWe’re a startup software studio and AI innovation hub based in Chennai, helping global startups build, scale, and automate with high quality web, mobile, and AI-powered products.\n",
          "location": "Chennai",
          "salary": 2000000,
          "jobType": "part-time",
          "requirements": "React.js/Next.js/TypeScript",
          "userId": "7828adb6-00ac-4d9b-b9de-269ca91a8327"
        }
      ]
      ---

  📁 logs/
  📁 middleware/
    📄 authMiddleware.js
      ---
      const jwt = require("jsonwebtoken");
      
      const authenticate = async (req, res, next) => {
        try {
          const token = req.headers.authorization?.split(" ")[1];
          if (!token) {
            return res.status(401).json({ message: "No token provided" });
          }
      
          const decoded = jwt.verify(token, process.env.JWT_SECRET);
          req.user = { id: decoded.id, role: decoded.role };
          next();
        } catch (error) {
          return res.status(401).json({ message: "Invalid token" });
        }
      };
      
      const restrictTo = (...roles) => {
        return (req, res, next) => {
          if (!roles.includes(req.user.role)) {
            return res.status(403).json({ message: "Access denied" });
          }
          next();
        };
      };
      
      module.exports = {
        authenticate,
        restrictTo,
      };
      
      ---

    📄 errorMiddleware.js
      ---
      const errorHandler = (error, req, res, next) => {
        console.error(error);
        res.status(error.status || 500).json({
          message: error.message || "Server error",
          ...(process.env.NODE_ENV === "development" && { stack: error.stack }),
        });
      };
      
      module.exports = {
        errorHandler,
      };
      
      ---

    📄 roleMiddleware.js
      ---
      const restrictTo = (...roles) => {
        return (req, res, next) => {
          if (!roles.includes(req.user.role)) {
            return res.status(403).json({ message: "Access denied" });
          }
          next();
        };
      };
      
      module.exports = { restrictTo };
      
      ---

    📄 validatorMiddleware.js
      ---
      const { validationResult } = require("express-validator");
      
      const validate = (validations) => {
        return async (req, res, next) => {
          await Promise.all(validations.map((validation) => validation.run(req)));
          const errors = validationResult(req);
          if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
          }
          next();
        };
      };
      
      module.exports = { validate };
      
      ---

  📁 migrations/
    📄 20250627000001-create-user.cjs
      ---
      "use strict";
      
      module.exports = {
        async up(queryInterface, Sequelize) {
          await queryInterface.createTable("Users", {
            id: {
              type: Sequelize.UUID,
              defaultValue: Sequelize.UUIDV4,
              primaryKey: true,
            },
            name: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            email: {
              type: Sequelize.STRING,
              allowNull: false,
              unique: true,
            },
            password: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            role: {
              type: Sequelize.ENUM("candidate", "employer", "admin"),
              allowNull: false,
            },
            createdAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
            updatedAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
          });
        },
      
        async down(queryInterface, Sequelize) {
          await queryInterface.dropTable("Users");
        },
      };
      
      ---

    📄 20250627000002-create-job.js
      ---
      "use strict";
      
      module.exports = {
        async up(queryInterface, Sequelize) {
          await queryInterface.createTable("Jobs", {
            id: {
              type: Sequelize.UUID,
              defaultValue: Sequelize.UUIDV4,
              primaryKey: true,
            },
            title: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            company: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            description: {
              type: Sequelize.TEXT,
              allowNull: false,
            },
            location: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            salary: {
              type: Sequelize.INTEGER,
              allowNull: false,
            },
            jobType: {
              type: Sequelize.ENUM("full-time", "part-time", "remote"),
              allowNull: false,
            },
            requirements: {
              type: Sequelize.TEXT,
              allowNull: false,
            },
            status: {
              type: Sequelize.ENUM("pending", "approved", "rejected"),
              defaultValue: "pending",
            },
            userId: {
              type: Sequelize.UUID,
              references: {
                model: "Users",
                key: "id",
              },
              onDelete: "CASCADE",
              allowNull: false,
            },
            createdAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
            updatedAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
          });
        },
      
        async down(queryInterface, Sequelize) {
          await queryInterface.dropTable("Jobs");
        },
      };
      
      ---

    📄 20250627000003-create-application.js
      ---
      "use strict";
      
      module.exports = {
        async up(queryInterface, Sequelize) {
          await queryInterface.createTable("Applications", {
            id: {
              type: Sequelize.UUID,
              defaultValue: Sequelize.UUIDV4,
              primaryKey: true,
            },
            coverLetter: {
              type: Sequelize.TEXT,
              allowNull: false,
            },
            status: {
              type: Sequelize.ENUM("pending", "accepted", "rejected"),
              defaultValue: "pending",
            },
            userId: {
              type: Sequelize.UUID,
              references: {
                model: "Users",
                key: "id",
              },
              onDelete: "CASCADE",
              allowNull: false,
            },
            jobId: {
              type: Sequelize.UUID,
              references: {
                model: "Jobs",
                key: "id",
              },
              onDelete: "CASCADE",
              allowNull: false,
            },
            createdAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
            updatedAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
          });
        },
      
        async down(queryInterface, Sequelize) {
          await queryInterface.dropTable("Applications");
        },
      };
      
      ---

    📄 20250627000004-create-activity-log.js
      ---
      "use strict";
      
      module.exports = {
        async up(queryInterface, Sequelize) {
          await queryInterface.createTable("ActivityLogs", {
            id: {
              type: Sequelize.UUID,
              defaultValue: Sequelize.UUIDV4,
              primaryKey: true,
            },
            action: {
              type: Sequelize.STRING,
              allowNull: false,
            },
            details: {
              type: Sequelize.TEXT,
              allowNull: false,
            },
            userId: {
              type: Sequelize.UUID,
              references: {
                model: "Users",
                key: "id",
              },
              onDelete: "SET NULL",
              allowNull: true,
            },
            createdAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
            updatedAt: {
              type: Sequelize.DATE,
              allowNull: false,
              defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
            },
          });
        },
      
        async down(queryInterface, Sequelize) {
          await queryInterface.dropTable("ActivityLogs");
        },
      };
      
      ---

  📁 models/
    📄 ActivityLog.js
      ---
      const { DataTypes } = require("sequelize");
      const sequelize = require("../config/database");
      const User = require("./User");
      
      const ActivityLog = sequelize.define("ActivityLog", {
        id: {
          type: DataTypes.UUID,
          defaultValue: DataTypes.UUIDV4,
          primaryKey: true,
        },
        action: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        details: {
          type: DataTypes.TEXT,
          allowNull: false,
        },
      }, {
        hooks: {
          beforeCreate: async (log) => {
            log.action = log.action.trim();
            log.details = log.details.trim();
          },
        },
      });
      
      ActivityLog.belongsTo(User, { foreignKey: "userId" });
      
      module.exports = ActivityLog;
      ---

    📄 Application.js
      ---
      const { DataTypes } = require("sequelize");
      const sequelize = require("../config/database");
      const User = require("./User");
      const Job = require("./Job");
      
      const Application = sequelize.define("Application", {
        id: {
          type: DataTypes.UUID,
          defaultValue: DataTypes.UUIDV4,
          primaryKey: true,
        },
        coverLetter: {
          type: DataTypes.TEXT,
          allowNull: false,
        },
        status: {
          type: DataTypes.ENUM("pending", "accepted", "rejected"),
          defaultValue: "pending",
        },
      }, {
        hooks: {
          beforeCreate: async (application) => {
            application.coverLetter = application.coverLetter.trim();
          },
          afterCreate: async (application) => {
            const { logActivity } = require("../services/loggerService");
            const job = await Job.findByPk(application.jobId);
            await logActivity(application.userId, "application_created", `Applied to job ${job.title}`);
          },
          afterUpdate: async (application) => {
            const { logActivity } = require("../services/loggerService");
            if (application.changed("status")) {
              const job = await Job.findByPk(application.jobId);
              await logActivity(application.userId, "application_status_updated", `Application for job ${job.title} status changed to ${application.status}`);
            }
          },
        },
      });
      
      Application.belongsTo(User, { foreignKey: "userId", as: "candidate" });
      Application.belongsTo(Job, { foreignKey: "jobId", as: "job" });
      
      module.exports = Application;
      ---

    📄 Job.js
      ---
      const { DataTypes } = require("sequelize");
      const sequelize = require("../config/database");
      const User = require("./User");
      
      const Job = sequelize.define("Job", {
        id: {
          type: DataTypes.UUID,
          defaultValue: DataTypes.UUIDV4,
          primaryKey: true,
        },
        title: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        company: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        description: {
          type: DataTypes.TEXT,
          allowNull: false,
        },
        location: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        salary: {
          type: DataTypes.INTEGER,
          allowNull: false,
        },
        jobType: {
          type: DataTypes.ENUM("full-time", "part-time", "remote"),
          allowNull: false,
        },
        requirements: {
          type: DataTypes.TEXT,
          allowNull: false,
        },
        status: {
          type: DataTypes.ENUM("pending", "approved", "rejected"),
          defaultValue: "pending",
        },
      }, {
        hooks: {
          beforeCreate: async (job) => {
            job.title = job.title.trim();
            job.company = job.company.trim();
          },
          beforeUpdate: async (job) => {
            job.title = job.title.trim();
            job.company = job.company.trim();
          },
          afterUpdate: async (job) => {
            const { logActivity } = require("../services/loggerService");
            if (job.changed("status")) {
              await logActivity(job.userId, "job_status_updated", `Job ${job.title} status changed to ${job.status}`);
            }
          },
          afterDestroy: async (job) => {
            const { logActivity } = require("../services/loggerService");
            await logActivity(job.userId, "job_deleted", `Job ${job.title} deleted`);
          },
        },
      });
      
      Job.belongsTo(User, { foreignKey: "userId", as: "employer" });
      
      module.exports = Job;
      ---

    📄 User.js
      ---
      const { DataTypes } = require("sequelize");
      const sequelize = require("../config/database");
      const bcrypt = require("bcryptjs");
      
      const User = sequelize.define(
        "User",
        {
          id: {
            type: DataTypes.UUID,
            defaultValue: DataTypes.UUIDV4,
            primaryKey: true,
          },
          name: {
            type: DataTypes.STRING,
            allowNull: false,
          },
          email: {
            type: DataTypes.STRING,
            allowNull: false,
            unique: true,
          },
          password: {
            type: DataTypes.STRING,
            allowNull: false,
          },
          role: {
            type: DataTypes.ENUM("candidate", "employer", "admin"),
            allowNull: false,
          },
        },
        {
          hooks: {
            beforeSave: async (user) => {
              if (user.changed("password")) {
                user.password = await bcrypt.hash(user.password, 10);
              }
            },
            beforeCreate: async (user) => {
              user.email = user.email.toLowerCase().trim();
            },
            beforeUpdate: async (user) => {
              user.email = user.email.toLowerCase().trim();
            },
            afterCreate: async (user) => {
              const { logActivity } = require("../services/loggerService");
              await logActivity(user.id, "user_created", `User ${user.email} created with role ${user.role}`);
            },
            afterUpdate: async (user) => {
              const { logActivity } = require("../services/loggerService");
              if (user.changed("role")) {
                await logActivity(user.id, "role_updated", `User ${user.email} role changed to ${user.role}`);
              }
            },
          },
        }
      );
      
      User.prototype.comparePassword = async function (password) {
        return await bcrypt.compare(password, this.password);
      };
      
      module.exports = User;
      ---

    📄 index.js
      ---
      const fs = require("fs");
      const path = require("path");
      const Sequelize = require("sequelize");
      const sequelize = require("../config/database");
      
      const basename = path.basename(__filename);
      const db = {};
      
      fs.readdirSync(__dirname)
        .filter((file) => {
          return (
            file.indexOf(".") !== 0 &&
            file !== basename &&
            file.slice(-3) === ".js" &&
            file.indexOf(".test.js") === -1
          );
        })
        .forEach((file) => {
          const model = require(path.join(__dirname, file));
          db[model.name] = model;
        });
      
      Object.keys(db).forEach((modelName) => {
        if (db[modelName].associate) {
          db[modelName].associate(db);
        }
      });
      
      db.sequelize = sequelize;
      db.Sequelize = Sequelize;
      
      module.exports = db;
      
      ---

  📁 routes/
    📄 applicationRoutes.js
      ---
      const express = require('express');
      const {
        createApplication,
        getApplicationsByUser,
        getApplicationsByJob
      } = require('../controllers/applicationController');
      const { authenticate } = require('../middleware/authMiddleware');
      const { restrictTo } = require('../middleware/roleMiddleware');
      
      const router = express.Router();
      
      router.post('/', authenticate, restrictTo('candidate'), createApplication);
      router.get('/user/:userId', authenticate, getApplicationsByUser);
      router.get('/job/:jobId', authenticate, restrictTo('employer', 'admin'), getApplicationsByJob);
      
      module.exports = router;
      
      ---

    📄 authRoutes.js
      ---
      const express = require('express');
      const { login, register, getMe } = require('../controllers/authController');
      const { authenticate } = require('../middleware/authMiddleware');
      
      const router = express.Router();
      
      router.post('/login', login);
      router.post('/register', register);
      router.get('/me', authenticate, getMe);
      
      module.exports = router;
      ---

    📄 jobRoutes.js
      ---
      const express = require('express');
      const {
        getAllJobs,
        getJobById,
        createJob,
        updateJob,
        deleteJob,
        approveJob,
      } = require('../controllers/jobController');
      const { authenticate } = require('../middleware/authMiddleware');
      const { restrictTo } = require('../middleware/roleMiddleware');
      
      const router = express.Router();
      
      router.get('/', getAllJobs);
      router.get('/:id', getJobById);
      router.post('/', authenticate, restrictTo('employer'), createJob);
      router.put('/:id', authenticate, restrictTo('employer', 'admin'), updateJob);
      router.delete('/:id', authenticate, restrictTo('employer', 'admin'), deleteJob);
      router.patch('/:id/approve', authenticate, restrictTo('admin'), approveJob);
      
      module.exports = router;
      
      ---

    📄 userRoutes.js
      ---
      const express = require('express');
      const { getAllUsers, deleteUser } = require('../controllers/userController');
      const { authenticate } = require('../middleware/authMiddleware');
      const { restrictTo } = require('../middleware/roleMiddleware');
      
      const router = express.Router();
      
      router.get('/', authenticate, restrictTo('admin'), getAllUsers);
      router.delete('/:id', authenticate, restrictTo('admin'), deleteUser);
      
      module.exports = router;
      
      ---

  📄 server.js
    ---
    const express = require("express");
    const cors = require("cors");
    const helmet = require("helmet");
    const rateLimit = require("express-rate-limit");
    const dotenv = require("dotenv");
    const sequelize = require("./config/database");
    const authRoutes = require("./routes/authRoutes");
    const jobRoutes = require("./routes/jobRoutes");
    const applicationRoutes = require("./routes/applicationRoutes");
    const userRoutes = require("./routes/userRoutes");
    
    const { errorHandler } = require("./middleware/errorMiddleware");
    const { scheduleCronJobs } = require("./services/cronService");
    
    dotenv.config();
    
    const app = express();
    
    app.use(helmet());
    app.use(cors());
    app.use(express.json());
    app.use(
      rateLimit({
        windowMs: 15 * 60 * 1000,
        max: 100,
      })
    );
    
    app.use("/api/auth", authRoutes);
    app.use("/api/jobs", jobRoutes);
    app.use("/api/applications", applicationRoutes);
    app.use("/api/users", userRoutes);
    
    app.use(errorHandler);
    
    const PORT = process.env.PORT || 5000;
    
    sequelize
      .sync()
      .then(() => {
        scheduleCronJobs();
        app.listen(PORT, () => {
          console.log(`Server running on port ${PORT}`);
        });
      })
      .catch((err) => {
        console.error("Unable to connect to the database:", err);
      });
    ---

  📁 services/
    📄 cronService.js
      ---
      const cron = require('node-cron');
      const Job = require('../models/Job');
      const User = require('../models/User');
      const { logger } = require('./loggerService');
      const dummyJobs = require('../data/dummyJobs.json');
      
      const scheduleCronJobs = () => {
        console.log('scheduleCronJobs function called');
      
        cron.schedule('* * * * *', async () => {
          console.log('Cron job triggered');
      
          try {
            const userId = '550e8400-e29b-41d4-a716-446655440000';
      
            await User.findOrCreate({
              where: { id: userId },
              defaults: {
                name: 'Dummy Recruiter',
                email: 'dummy@jobboard.com',
                password: 'Dummy@123', 
                role: 'employer'
              }
            });
      
            const jobCount = await Job.count();
            console.log('Job count:', jobCount);
      
            if (jobCount < 100) {
              const jobsToCreate = dummyJobs.slice(0, 100 - jobCount);
              const jobsWithUser = jobsToCreate.map(job => ({
                ...job,
                userId
              }));
      
              await Job.bulkCreate(jobsWithUser);
              logger.info(`Cron job: Added ${jobsWithUser.length} dummy jobs`);
            }
      
            logger.info('Cron job: Job count check completed');
          } catch (error) {
            logger.error('Cron job error:', error.message || error);
          }
        });
      };
      
      module.exports = { scheduleCronJobs };
      
      ---

    📄 loggerService.js
      ---
      const winston = require('winston');
      const ActivityLog = require('../models/ActivityLog');
      
      const logger = winston.createLogger({
        level: 'info',
        format: winston.format.combine(
          winston.format.timestamp(),
          winston.format.json()
        ),
        transports: [
          new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
          new winston.transports.File({ filename: 'logs/combined.log' }),
        ],
      });
      
      const logActivity = async (userId, action, details) => {
        await ActivityLog.create({ userId, action, details });
        logger.info(`${action}: ${details}`, { userId });
      };
      
      module.exports = { logger, logActivity };
      
      ---

    📄 seedDatabase.js
      ---
      const Job = require("../models/Job");
      const dummyJobs = require("../data/dummyJobs.json");
      
      const seedDatabase = async () => {
        try {
          await Job.bulkCreate(dummyJobs);
          console.log("Dummy jobs seeded successfully");
        } catch (error) {
          console.error("Error seeding database:", error);
        }
      };
      
      module.exports = seedDatabase;
      ---

  📁 utils/
    📄 constants.js
      ---
      const JOB_TYPES = [
        { value: 'full-time', label: 'Full Time' },
        { value: 'part-time', label: 'Part Time' },
        { value: 'remote', label: 'Remote' },
      ];
      
      const USER_ROLES = [
        { value: 'candidate', label: 'Candidate' },
        { value: 'employer', label: 'Employer' },
        { value: 'admin', label: 'Admin' },
      ];
      
      const SALARY_RANGES = [
        { value: '', label: 'Any Salary' },
        { value: '0-50000', label: '₹0 - ₹50,000' },
        { value: '50000-100000', label: '₹50,000 - ₹1,00,000' },
        { value: '100000-500000', label: '₹1,00,000 - ₹5,00,000' },
        { value: '500000+', label: '₹5,00,000+' },
      ];
      
      const LOCATIONS = [
        'Bangalore',
        'Mumbai',
        'Delhi',
        'Hyderabad',
        'Chennai',
        'Pune',
        'Kolkata',
        'Ahmedabad',
      ];
      
      module.exports = {
        JOB_TYPES,
        USER_ROLES,
        SALARY_RANGES,
        LOCATIONS,
      };
      
      ---

    📄 validators.js
      ---
      const { z } = require('zod');
      
      const loginSchema = z.object({
        email: z.string().email('Invalid email format'),
        password: z.string().min(1, 'Password is required'),
      });
      
      const registerSchema = z.object({
        name: z.string().min(2, 'Name must be at least 2 characters'),
        email: z.string().email('Invalid email format'),
        password: z.string()
          .min(8, 'Password must be at least 8 characters')
          .regex(/[!@#$%^&*(),.?":{}|<>]/, 'Password must contain at least one special character'),
        role: z.enum(['candidate', 'employer', 'admin'], {
          errorMap: () => ({ message: 'Please select a valid role' })
        }),
      });
      
      const jobSchema = z.object({
        title: z.string().min(3, 'Job title must be at least 3 characters'),
        company: z.string().min(2, 'Company name must be at least 2 characters'),
        description: z.string().min(50, 'Description must be at least 50 characters'),
        location: z.string().min(2, 'Location is required'),
        salary: z.number().min(0, 'Salary must be a positive number'),
        jobType: z.enum(['full-time', 'part-time', 'remote'], {
          errorMap: () => ({ message: 'Please select a valid job type' })
        }),
        requirements: z.string().min(20, 'Requirements must be at least 20 characters'),
      });
      
      const applicationSchema = z.object({
        job: z.string().uuid('Invalid job ID'),
        coverLetter: z.string().min(50, 'Cover letter must be at least 50 characters'),
      });
      
      module.exports = {
        loginSchema,
        registerSchema,
        jobSchema,
        applicationSchema
      };
      ---

📁 frontend/
  📄 README.md
    ---
    # React + Vite
    
    This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
    
    Currently, two official plugins are available:
    
    - [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
    - [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
    
    ## Expanding the ESLint configuration
    
    If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
    
    ---

  📄 eslint.config.js
    ---
    import js from '@eslint/js'
    import globals from 'globals'
    import reactHooks from 'eslint-plugin-react-hooks'
    import reactRefresh from 'eslint-plugin-react-refresh'
    import { defineConfig, globalIgnores } from 'eslint/config'
    
    export default defineConfig([
      globalIgnores(['dist']),
      {
        files: ['**/*.{js,jsx}'],
        extends: [
          js.configs.recommended,
          reactHooks.configs['recommended-latest'],
          reactRefresh.configs.vite,
        ],
        languageOptions: {
          ecmaVersion: 2020,
          globals: globals.browser,
          parserOptions: {
            ecmaVersion: 'latest',
            ecmaFeatures: { jsx: true },
            sourceType: 'module',
          },
        },
        rules: {
          'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
        },
      },
    ])
    
    ---

  📄 index.html
    ---
    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Job Board Platform</title>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.jsx"></script>
      </body>
    </html>
    ---

  📁 src/
    📄 App.jsx
      ---
      import React from 'react'
      import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
      import { AuthProvider } from './context/AuthContext'
      import Navbar from './components/common/Navbar'
      import Footer from './components/common/Footer'
      import Home from './pages/Home'
      import Jobs from './pages/Jobs'
      import Login from './pages/Login'
      import Register from './pages/Register'
      import Dashboard from './pages/Dashboard'
      import JobDetail from './pages/JobDetail'
      import ProtectedRoute from './components/common/ProtectedRoute'
      
      function App() {
        return (
          <AuthProvider>
            <Router>
              <div className="min-h-screen bg-gray-50 flex flex-col">
                <Navbar />
                <main className="flex-grow">
                  <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/jobs" element={<Jobs />} />
                    <Route path="/jobs/:id" element={<JobDetail />} />
                    <Route path="/login" element={<Login />} />
                    <Route path="/register" element={<Register />} />
                    <Route path="/dashboard" element={
                      <ProtectedRoute>
                        <Dashboard />
                      </ProtectedRoute>
                    } />
                  </Routes>
                </main>
                <Footer />
              </div>
            </Router>
          </AuthProvider>
        )
      }
      
      export default App
      ---

    📁 components/
      📁 common/
        📄 Footer.jsx
          ---
          import React from 'react'
          import { Briefcase } from 'lucide-react'
          
          const Footer = () => {
            return (
              <footer className="bg-gray-900 text-white">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                    <div className="col-span-1 md:col-span-2">
                      <div className="flex items-center space-x-2 mb-4">
                        <Briefcase className="h-8 w-8 text-blue-400" />
                        <span className="text-xl font-bold">JobBoard</span>
                      </div>
                      <p className="text-gray-400 mb-4">
                        Connect talented professionals with amazing opportunities. 
                        Find your dream job or hire the best candidates.
                      </p>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-semibold mb-4">For Job Seekers</h3>
                      <ul className="space-y-2 text-gray-400">
                        <li><a href="/jobs" className="hover:text-white transition-colors">Browse Jobs</a></li>
                        <li><a href="/register" className="hover:text-white transition-colors">Create Account</a></li>
                        <li><a href="/dashboard" className="hover:text-white transition-colors">My Applications</a></li>
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-semibold mb-4">For Employers</h3>
                      <ul className="space-y-2 text-gray-400">
                        <li><a href="/register" className="hover:text-white transition-colors">Post a Job</a></li>
                        <li><a href="/dashboard" className="hover:text-white transition-colors">Manage Jobs</a></li>
                        <li><a href="/dashboard" className="hover:text-white transition-colors">View Applications</a></li>
                      </ul>
                    </div>
                  </div>
                  
                  <div className="border-t border-gray-800 mt-8 pt-8 text-center">
                    <p className="text-gray-400">
                      © 2025 JobBoard. All rights reserved.
                    </p>
                  </div>
                </div>
              </footer>
            )
          }
          
          export default Footer
          ---

        📄 Navbar.jsx
          ---
          import React from 'react'
          import { Link, useNavigate } from 'react-router-dom'
          import { useAuth } from '../../context/AuthContext'
          import { Briefcase, User, LogOut, Menu, X } from 'lucide-react'
          import { useState } from 'react'
          import Button from '../ui/Button'
          
          const Navbar = () => {
            const { user, isAuthenticated, logout } = useAuth()
            const navigate = useNavigate()
            const [isMenuOpen, setIsMenuOpen] = useState(false)
          
            const handleLogout = () => {
              logout()
              navigate('/')
              setIsMenuOpen(false)
            }
          
            return (
              <nav className="bg-white shadow-lg">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div className="flex justify-between h-16">
                    <div className="flex items-center">
                      <Link to="/" className="flex items-center space-x-2">
                        <Briefcase className="h-8 w-8 text-blue-600" />
                        <span className="text-xl font-bold text-gray-900">JobBoard</span>
                      </Link>
                    </div>
          
                    <div className="hidden md:flex items-center space-x-8">
                      <Link to="/" className="text-gray-700 hover:text-blue-600 transition-colors">
                        Home
                      </Link>
                      <Link to="/jobs" className="text-gray-700 hover:text-blue-600 transition-colors">
                        Jobs
                      </Link>
                      
                      {isAuthenticated ? (
                        <div className="flex items-center space-x-4">
                          <Link to="/dashboard" className="text-gray-700 hover:text-blue-600 transition-colors">
                            Dashboard
                          </Link>
                          <div className="flex items-center space-x-2">
                            <User className="h-5 w-5 text-gray-600" />
                            <span className="text-sm text-gray-700">{user?.name}</span>
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              {user?.role}
                            </span>
                          </div>
                          <Button variant="outline" size="sm" onClick={handleLogout}>
                            <LogOut className="h-4 w-4 mr-1" />
                            Logout
                          </Button>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-4">
                          <Link to="/login">
                            <Button variant="outline" size="sm">Login</Button>
                          </Link>
                          <Link to="/register">
                            <Button size="sm">Register</Button>
                          </Link>
                        </div>
                      )}
                    </div>
          
                    <div className="md:hidden flex items-center">
                      <button
                        onClick={() => setIsMenuOpen(!isMenuOpen)}
                        className="text-gray-700 hover:text-blue-600"
                      >
                        {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
                      </button>
                    </div>
                  </div>
                </div>
          
                {isMenuOpen && (
                  <div className="md:hidden bg-white border-t">
                    <div className="px-2 pt-2 pb-3 space-y-1">
                      <Link
                        to="/"
                        className="block px-3 py-2 text-gray-700 hover:text-blue-600"
                        onClick={() => setIsMenuOpen(false)}
                      >
                        Home
                      </Link>
                      <Link
                        to="/jobs"
                        className="block px-3 py-2 text-gray-700 hover:text-blue-600"
                        onClick={() => setIsMenuOpen(false)}
                      >
                        Jobs
                      </Link>
                      
                      {isAuthenticated ? (
                        <>
                          <Link
                            to="/dashboard"
                            className="block px-3 py-2 text-gray-700 hover:text-blue-600"
                            onClick={() => setIsMenuOpen(false)}
                          >
                            Dashboard
                          </Link>
                          <div className="px-3 py-2">
                            <div className="text-sm text-gray-600">{user?.name} ({user?.role})</div>
                          </div>
                          <button
                            onClick={handleLogout}
                            className="block w-full text-left px-3 py-2 text-gray-700 hover:text-blue-600"
                          >
                            Logout
                          </button>
                        </>
                      ) : (
                        <div className="px-3 py-2 space-y-2">
                          <Link to="/login" onClick={() => setIsMenuOpen(false)}>
                            <Button variant="outline" size="sm" className="w-full">Login</Button>
                          </Link>
                          <Link to="/register" onClick={() => setIsMenuOpen(false)}>
                            <Button size="sm" className="w-full">Register</Button>
                          </Link>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </nav>
            )
          }
          
          export default Navbar
          ---

        📄 ProtectedRoute.jsx
          ---
          import React from 'react'
          import { useAuth } from '../../context/AuthContext'
          import { Navigate } from 'react-router-dom'
          import Spinner from '../ui/Spinner'
          
          const ProtectedRoute = ({ children, roles = [] }) => {
            const { isAuthenticated, user, loading } = useAuth()
          
            if (loading) {
              return (
                <div className="flex justify-center items-center min-h-screen">
                  <Spinner size="lg" />
                </div>
              )
            }
          
            if (!isAuthenticated) {
              return <Navigate to="/login" replace />
            }
          
            if (roles.length > 0 && !roles.includes(user?.role)) {
              return (
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                  <div className="text-center">
                    <h1 className="text-2xl font-bold text-gray-900 mb-4">Access Denied</h1>
                    <p className="text-gray-600">You don't have permission to access this page.</p>
                  </div>
                </div>
              )
            }
          
            return children
          }
          
          export default ProtectedRoute
          ---

      📁 dashboard/
        📄 AdminDashboard.jsx
          ---
          // import React from 'react'
          // import { useState, useEffect } from 'react'
          // import { usersAPI, jobsAPI } from '../../services/api'
          // import { toast } from 'react-hot-toast'
          // import Button from '../ui/Button'
          // import Spinner from '../ui/Spinner'
          
          // const AdminDashboard = () => {
          //   const [users, setUsers] = useState([])
          //   const [jobs, setJobs] = useState([])
          //   const [loading, setLoading] = useState(true)
          
          //   useEffect(() => {
          //     const fetchData = async () => {
          //       try {
          //         setLoading(true)
          //         const [usersRes, jobsRes] = await Promise.all([
          //           usersAPI.getAll(),
          //           jobsAPI.getAll()
          //         ])
          //         setUsers(usersRes.data.users)
          //         setJobs(jobsRes.data.jobs)
          //       } catch (error) {
          //         toast.error('Failed to fetch dashboard data')
          //       } finally {
          //         setLoading(false)
          //       }
          //     }
          
          //     fetchData()
          //   }, [])
          
          //   const handleApproveJob = async (jobId) => {
          //     try {
          //       await jobsAPI.approve(jobId)
          //       setJobs(jobs.map(job => 
          //         job._id === jobId ? { ...job, status: 'approved' } : job
          //       ))
          //       toast.success('Job approved successfully')
          //     } catch (error) {
          //       toast.error('Failed to approve job')
          //     }
          //   }
          
          //   const handleDeleteUser = async (userId) => {
          //     try {
          //       await usersAPI.delete(userId)
          //       setUsers(users.filter(user => user._id !== userId))
          //       toast.success('User deleted successfully')
          //     } catch (error) {
          //       toast.error('Failed to delete user')
          //     }
          //   }
          
          //   if (loading) {
          //     return (
          //       <div className="flex justify-center items-center min-h-screen">
          //         <Spinner size="lg" />
          //       </div>
          //     )
          //   }
          
          //   return (
          //     <div className="space-y-8">
          //       <div>
          //         <h1 className="text-2xl font-bold text-gray-900 mb-4">Admin Dashboard</h1>
          //         <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          //           <div className="bg-white p-4 rounded-lg shadow">
          //             <h3 className="text-gray-500">Total Users</h3>
          //             <p className="text-3xl font-bold">{users.length}</p>
          //           </div>
          //           <div className="bg-white p-4 rounded-lg shadow">
          //             <h3 className="text-gray-500">Total Jobs</h3>
          //             <p className="text-3xl font-bold">{jobs.length}</p>
          //           </div>
          //           <div className="bg-white p-4 rounded-lg shadow">
          //             <h3 className="text-gray-500">Pending Jobs</h3>
          //             <p className="text-3xl font-bold">
          //               {jobs.filter(job => job.status === 'pending').length}
          //             </p>
          //           </div>
          //         </div>
          //       </div>
          
          //       <div className="bg-white shadow rounded-lg p-6">
          //         <h2 className="text-xl font-semibold mb-4">Pending Jobs</h2>
          //         {jobs.filter(job => job.status === 'pending').length > 0 ? (
          //           <div className="space-y-4">
          //             {jobs
          //               .filter(job => job.status === 'pending')
          //               .map(job => (
          //                 <div key={job._id} className="border-b pb-4 last:border-b-0">
          //                   <div className="flex justify-between items-center">
          //                     <div>
          //                       <h3 className="font-medium">{job.title}</h3>
          //                       <p className="text-sm text-gray-600">{job.company}</p>
          //                     </div>
          //                     <Button
          //                       size="sm"
          //                       onClick={() => handleApproveJob(job._id)}
          //                     >
          //                       Approve
          //                     </Button>
          //                   </div>
          //                 </div>
          //               ))}
          //           </div>
          //         ) : (
          //           <p className="text-gray-500">No pending jobs</p>
          //         )}
          //       </div>
          
          //       <div className="bg-white shadow rounded-lg p-6">
          //         <h2 className="text-xl font-semibold mb-4">All Users</h2>
          //         <div className="overflow-x-auto">
          //           <table className="min-w-full divide-y divide-gray-200">
          //             <thead className="bg-gray-50">
          //               <tr>
          //                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          //                   Name
          //                 </th>
          //                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          //                   Email
          //                 </th>
          //                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          //                   Role
          //                 </th>
          //                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          //                   Actions
          //                 </th>
          //               </tr>
          //             </thead>
          //             <tbody className="bg-white divide-y divide-gray-200">
          //               {users.map(user => (
          //                 <tr key={user._id}>
          //                   <td className="px-6 py-4 whitespace-nowrap">
          //                     <div className="text-sm font-medium text-gray-900">
          //                       {user.name}
          //                     </div>
          //                   </td>
          //                   <td className="px-6 py-4 whitespace-nowrap">
          //                     <div className="text-sm text-gray-500">{user.email}</div>
          //                   </td>
          //                   <td className="px-6 py-4 whitespace-nowrap">
          //                     <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
          //                       {user.role}
          //                     </span>
          //                   </td>
          //                   <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
          //                     <button
          //                       onClick={() => handleDeleteUser(user._id)}
          //                       className="text-red-600 hover:text-red-900"
          //                     >
          //                       Delete
          //                     </button>
          //                   </td>
          //                 </tr>
          //               ))}
          //             </tbody>
          //           </table>
          //         </div>
          //       </div>
          //     </div>
          //   )
          // }
          
          // export default AdminDashboard
          ---

        📄 CandidateDashboard.jsx
          ---
          import React from 'react'
          import { useState, useEffect } from 'react'
          import { applicationsAPI } from '../../services/api'
          import { toast } from 'react-hot-toast'
          import Spinner from '../ui/Spinner'
          import { Link, useNavigate } from 'react-router-dom'
          import { Briefcase, Clock, Check, X } from 'lucide-react'
          import { useAuth } from '../../context/AuthContext'
          
          const CandidateDashboard = () => {
            const [applications, setApplications] = useState([])
            const [loading, setLoading] = useState(true)
          
            const { user, isAuthenticated } = useAuth()
          
            const navigate = useNavigate()
            
            useEffect(() => {
              const fetchApplications = async () => {
                try {
                  setLoading(true)
                  const response = await applicationsAPI.getByUser(user.id)
                  setApplications(response.data.applications)
                } catch (error) {
                  console.log('Failed to fetch applications: ', error)
                } finally {
                  setLoading(false)
                }
              }
          
              fetchApplications()
            }, [])
          
            const getStatusIcon = (status) => {
              switch (status) {
                case 'pending':
                  return <Clock className="h-4 w-4 text-yellow-500" />
                case 'accepted':
                  return <Check className="h-4 w-4 text-green-500" />
                case 'rejected':
                  return <X className="h-4 w-4 text-red-500" />
                default:
                  return <Clock className="h-4 w-4 text-yellow-500" />
              }
            }
          
            if (loading) {
              return (
                <div className="flex justify-center items-center min-h-screen">
                  <Spinner size="lg" />
                </div>
              )
            }
          
            return (
              <div className="space-y-8">
                <div>
                  <h1 className="text-2xl font-bold text-gray-900 mb-4">Candidate Dashboard</h1>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div className="bg-white p-4 rounded-lg shadow">
                      <h3 className="text-gray-500">Total Applications</h3>
                      <p className="text-3xl font-bold">{applications.length}</p>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow">
                      <h3 className="text-gray-500">Pending</h3>
                      <p className="text-3xl font-bold">
                        {applications.filter(app => app.status === 'pending').length}
                      </p>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow">
                      <h3 className="text-gray-500">Accepted</h3>
                      <p className="text-3xl font-bold">
                        {applications.filter(app => app.status === 'accepted').length}
                      </p>
                    </div>
                  </div>
                </div>
          
                <div className="bg-white shadow rounded-lg p-6">
                  <h2 className="text-xl font-semibold mb-4">Your Applications</h2>
                  {applications.length > 0 ? (
                    <div className="space-y-4">
                      
                      {applications.map(application => (
                        <div key={application.id} className="border-b pb-4 last:border-b-0">
                          <div className="flex justify-between items-start">
                            <div>
                              <div
                                onClick={() => navigate(`/jobs/${application.job.id}`, { state: { application: application } })}
                                className="font-medium text-blue-600 hover:text-blue-800"
                              >
                                {application.job.title}
                              </div>
                              <p className="text-sm text-gray-600">
                                {application.job.company}
                              </p>
                              <p className="text-sm mt-2 text-gray-700 line-clamp-2">
                                {application.coverLetter}
                              </p>
                            </div>
                            <div className="flex items-center space-x-2">
                              {getStatusIcon(application.status)}
                              <span className="text-sm capitalize">{application.status}</span>
                            </div>
                          </div>
                          <div className="flex justify-between items-center mt-2">
                            <span className="text-xs text-gray-500">
                              Applied on {new Date(application.createdAt).toLocaleDateString()}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <Briefcase className="mx-auto h-12 w-12 text-gray-400" />
                      <h3 className="mt-2 text-lg font-medium text-gray-900">
                        No applications yet
                      </h3>
                      <p className="mt-1 text-gray-500">
                        Browse <Link to="/jobs" className="text-blue-600">jobs</Link> and apply to get started
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )
          }
          
          export default CandidateDashboard
          ---

        📄 EmployerDashboard.jsx
          ---
          import React from 'react'
          import { useState, useEffect } from 'react'
          import { jobsAPI, applicationsAPI } from '../../services/api'
          import { toast } from 'react-hot-toast'
          import Button from '../ui/Button'
          import Spinner from '../ui/Spinner'
          import Modal from '../ui/Modal'
          import JobForm from '../job/JobForm'
          
          const EmployerDashboard = () => {
            const [jobs, setJobs] = useState([])
            // const [applications, setApplications] = useState([])
            const [loading, setLoading] = useState(true)
            const [showJobForm, setShowJobForm] = useState(false)
            const [editingJob, setEditingJob] = useState(null)
          
            useEffect(() => {
              const fetchData = async () => {
                try {
                  setLoading(true)
                  const [jobsRes, appsRes] = await Promise.all([
                    jobsAPI.getAll(),
                    // applicationsAPI.getByJob()
                  ])
                  setJobs(jobsRes.data.jobs)
                  // setApplications(appsRes.data.applications)
                } catch (error) {
                  toast.error('Failed to fetch dashboard data')
                } finally {
                  setLoading(false)
                }
              }
          
              fetchData()
            }, [])
          
            const handleCreateJob = async (jobData) => {
              try {
                const response = await jobsAPI.create(jobData)
                setJobs([...jobs, response.data.job])
                setShowJobForm(false)
                toast.success('Job created successfully!')
              } catch (error) {
                toast.error(error.response?.data?.message || 'Failed to create job')
              }
            }
          
            const handleUpdateJob = async (jobData) => {
              try {
                const response = await jobsAPI.update(editingJob.id, jobData)
                setJobs(jobs.map(job => 
                  job.id === editingJob.id ? response.data.job : job
                ))
                setEditingJob(null)
                setShowJobForm(false)
                toast.success('Job updated successfully!')
              } catch (error) {
                toast.error(error.response?.data?.message || 'Failed to update job')
              }
            }
          
            const handleDeleteJob = async (jobId) => {
              try {
                await jobsAPI.delete(jobId)
                setJobs(jobs.filter(job => job.id !== jobId))
                toast.success('Job deleted successfully!')
              } catch (error) {
                toast.error('Failed to delete job')
              }
            }
          
            const handleEditJob = (job) => {
              setEditingJob(job)
              setShowJobForm(true)
            }
          
            if (loading) {
              return (
                <div className="flex justify-center items-center min-h-screen">
                  <Spinner size="lg" />
                </div>
              )
            }
          
            return (
              <div className="space-y-8">
                <div className="flex justify-between items-center">
                  <h1 className="text-2xl font-bold text-gray-900">Employer Dashboard</h1>
                  <Button onClick={() => setShowJobForm(true)}>
                    Post New Job
                  </Button>
                </div>
          
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-white p-4 rounded-lg shadow">
                    <h3 className="text-gray-500">Total Jobs</h3>
                    <p className="text-3xl font-bold">{jobs.length}</p>
                  </div>
                  <div className="bg-white p-4 rounded-lg shadow">
                    <h3 className="text-gray-500">Active Jobs</h3>
                    <p className="text-3xl font-bold">
                      {jobs.filter(job => job.status === 'approved').length}
                    </p>
                  </div>
                  <div className="bg-white p-4 rounded-lg shadow">
                    <h3 className="text-gray-500">Total Applications</h3>
                    {/* <p className="text-3xl font-bold">{applications.length}</p> */}
                  </div>
                </div>
          
                <div className="bg-white shadow rounded-lg p-6">
                  <h2 className="text-xl font-semibold mb-4">Your Jobs</h2>
                  {jobs.length > 0 ? (
                    <div className="space-y-4">
                      {jobs.map(job => (
                        <div key={job.id} className="border-b pb-4 last:border-b-0">
                          <div className="flex justify-between items-center">
                            <div>
                              <h3 className="font-medium">{job.title}</h3>
                              <p className="text-sm text-gray-600">
                                {job.company} • {job.status}
                              </p>
                            </div>
                            <div className="flex space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleEditJob(job)}
                              >
                                Edit
                              </Button>
                              <Button
                                variant="danger"
                                size="sm"
                                onClick={() => handleDeleteJob(job.id)}
                              >
                                Delete
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">You haven't posted any jobs yet</p>
                  )}
                </div>
          
                <Modal
                  isOpen={showJobForm}
                  onClose={() => {
                    setShowJobForm(false)
                    setEditingJob(null)
                  }}
                  title={editingJob ? 'Edit Job' : 'Post New Job'}
                  size="lg"
                >
                  <JobForm
                    job={editingJob}
                    onSubmit={editingJob ? handleUpdateJob : handleCreateJob}
                  />
                </Modal>
              </div>
            )
          }
          
          export default EmployerDashboard
          ---

      📁 job/
        📄 JobCard.jsx
          ---
          import React from 'react'
          import { Link } from 'react-router-dom'
          import { MapPin, Briefcase, DollarSign, CheckCircle } from 'lucide-react'
          import Button from '../ui/Button'
          
          const JobCard = ({ job, onApply, showApplyButton, applied }) => {
            return (
              <div className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900">{job.title}</h3>
                    <p className="text-gray-600">{job.company}</p>
                  </div>
                  {applied && (
                    <div className="flex items-center text-green-600">
                      <CheckCircle className="h-5 w-5 mr-1" />
                      <span>Applied</span>
                    </div>
                  )}
                </div>
                <div className="space-y-2 mb-4">
                  <div className="flex items-center text-gray-600">
                    <MapPin className="h-4 w-4 mr-2" />
                    <span>{job.location}</span>
                  </div>
                  <div className="flex items-center text-gray-600">
                    <Briefcase className="h-4 w-4 mr-2" />
                    <span>{job.jobType}</span>
                  </div>
                  <div className="flex items-center text-gray-600">
                    <DollarSign className="h-4 w-4 mr-2" />
                    <span>₹{job.salary.toLocaleString()}</span>
                  </div>
                </div>
                <p className="text-gray-600 mb-4 line-clamp-2">{job.description}</p>
                <div className="flex justify-between items-center">
                  <Link
                    to={`/jobs/${job.id}`}
                    className="text-blue-600 hover:text-blue-800 font-medium"
                  >
                    View Details
                  </Link>
                  {showApplyButton && (
                    <Button
                      onClick={() => onApply(job)}
                      className="bg-blue-600 text-white hover:bg-blue-700"
                    >
                      Apply Now
                    </Button>
                  )}
                </div>
              </div>
            )
          }
          
          export default JobCard
          ---

        📄 JobDetails.jsx
          ---
                    import React from 'react'
                    import { MapPin, Clock, DollarSign, Building, Calendar, Users } from 'lucide-react'
                    import Button from '../ui/Button'
                    import { useAuth } from '../../context/AuthContext'
                    import { useLocation, useParams } from 'react-router-dom'
                    
                    const JobDetails = ({ job, onApply, canApply = true }) => {
                      const formatSalary = (salary) => {
                        return new Intl.NumberFormat('en-IN', {
                          style: 'currency',
                          currency: 'INR',
                          maximumFractionDigits: 0
                        }).format(salary)
                      }
                    
                      const formatJobType = (type) => {
                        return type.split('-').map(word => 
                          word.charAt(0).toUpperCase() + word.slice(1)
                        ).join(' ')
                      }
                    
                      const { user } = useAuth()
                      const { id } = useParams()
                      const location = useLocation()
                    
                      const hasApplied = (location?.state?.application?.jobId === id && location?.state?.application?.userId === user?.id) || location?.state?.applied;
                    
                      return (
                        <div className="bg-white rounded-lg shadow-md p-8">
                          <div className="mb-8">
                            <div className="flex justify-between items-start mb-4">
                              <div>
                                <h1 className="text-3xl font-bold text-gray-900 mb-2">{job.title}</h1>
                                <div className="flex items-center text-xl text-gray-600">
                                  <Building className="h-5 w-5 mr-2" />
                                  <span>{job.company}</span>
                                </div>
                              </div>
                              {canApply && !hasApplied && (
                                <Button size="lg" onClick={() => onApply(job)}>
                                  Apply Now
                                </Button>
                              )}
                              {hasApplied && (
                                <Button size="lg" variant="secondary" disabled>
                                  Applied
                                </Button>
                              )}
                            </div>
                    
                            <div className="flex flex-wrap items-center gap-6 text-gray-600 mb-6">
                              <div className="flex items-center">
                                <MapPin className="h-5 w-5 mr-2" />
                                <span>{job.location}</span>
                              </div>
                              <div className="flex items-center">
                                <Clock className="h-5 w-5 mr-2" />
                                <span>{formatJobType(job.jobType)}</span>
                              </div>
                              <div className="flex items-center">
                                <DollarSign className="h-5 w-5 mr-2" />
                                <span>{formatSalary(job.salary)}</span>
                              </div>
                              <div className="flex items-center">
                                <Calendar className="h-5 w-5 mr-2" />
                                <span>Posted {new Date(job.createdAt).toLocaleDateString()}</span>
                              </div>
                            </div>
                          </div>
                    
                          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div className="lg:col-span-2">
                              <section className="mb-8">
                                <h2 className="text-2xl font-semibold text-gray-900 mb-4">Job Description</h2>
                                <div className="prose prose-blue max-w-none">
                                  <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                                    {job.description}
                                  </p>
                                </div>
                              </section>
                    
                              <section className="mb-8">
                                <h2 className="text-2xl font-semibold text-gray-900 mb-4">Requirements</h2>
                                <div className="prose prose-blue max-w-none">
                                  <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                                    {job.requirements}
                                  </p>
                                </div>
                              </section>
                            </div>
                    
                            <div className="lg:col-span-1">
                              <div className="bg-gray-50 rounded-lg p-6 sticky top-6">
                                <h3 className="text-lg font-semibold text-gray-900 mb-4">Job Summary</h3>
                                <div className="space-y-4">
                                  <div>
                                    <span className="text-sm font-medium text-gray-500">Company</span>
                                    <p className="text-gray-900">{job.company}</p>
                                  </div>
                                  <div>
                                    <span className="text-sm font-medium text-gray-500">Location</span>
                                    <p className="text-gray-900">{job.location}</p>
                                  </div>
                                  <div>
                                    <span className="text-sm font-medium text-gray-500">Job Type</span>
                                    <p className="text-gray-900">{formatJobType(job.jobType)}</p>
                                  </div>
                                  <div>
                                    <span className="text-sm font-medium text-gray-500">Salary</span>
                                    <p className="text-gray-900">{formatSalary(job.salary)}</p>
                                  </div>
                                  <div>
                                    <span className="text-sm font-medium text-gray-500">Posted</span>
                                    <p className="text-gray-900">{new Date(job.createdAt).toLocaleDateString()}</p>
                                  </div>
                                </div>
                    
                                {canApply && !hasApplied && (
                                  <Button 
                                    className="w-full mt-6" 
                                    onClick={() => onApply(job)}
                                  >
                                    Apply for this Job
                                  </Button>
                                )}
                                {hasApplied && (
                                  <Button 
                                    className="w-full mt-6" 
                                    variant="secondary" 
                                    disabled
                                  >
                                    Application Submitted
                                  </Button>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    }
                    
                    export default JobDetails
          ---

        📄 JobFilters.jsx
          ---
          import React from 'react'
          import { useState } from 'react'
          import { Search, MapPin, DollarSign, Briefcase, X } from 'lucide-react'
          import Button from '../ui/Button'
          import Input from '../ui/Input'
          import { JOB_TYPES, SALARY_RANGES, LOCATIONS } from '../../utils/constants'
          
          const JobFilters = ({ filters, onFiltersChange, onClear }) => {
            const [localFilters, setLocalFilters] = useState(filters)
          
            const handleFilterChange = (key, value) => {
              const newFilters = { ...localFilters, [key]: value }
              setLocalFilters(newFilters)
              onFiltersChange(newFilters)
            }
          
            const handleClear = () => {
              const clearedFilters = {
                search: '',
                location: '',
                jobType: '',
                salaryRange: ''
              }
              setLocalFilters(clearedFilters)
              onClear()
            }
          
            const hasActiveFilters = Object.values(localFilters).some(value => value !== '')
          
            return (
              <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search jobs..."
                      value={localFilters.search}
                      onChange={(e) => handleFilterChange('search', e.target.value)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
          
                  <div className="relative">
                    <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <select
                      value={localFilters.location}
                      onChange={(e) => handleFilterChange('location', e.target.value)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 appearance-none"
                    >
                      <option value="">All Locations</option>
                      {LOCATIONS.map(location => (
                        <option key={location} value={location}>{location}</option>
                      ))}
                    </select>
                  </div>
          
                  <div className="relative">
                    <Briefcase className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <select
                      value={localFilters.jobType}
                      onChange={(e) => handleFilterChange('jobType', e.target.value)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 appearance-none"
                    >
                      <option value="">All Job Types</option>
                      {JOB_TYPES.map(type => (
                        <option key={type.value} value={type.value}>{type.label}</option>
                      ))}
                    </select>
                  </div>
          
                  <div className="relative">
                    <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <select
                      value={localFilters.salaryRange}
                      onChange={(e) => handleFilterChange('salaryRange', e.target.value)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 appearance-none"
                    >
                      {SALARY_RANGES.map(range => (
                        <option key={range.value} value={range.value}>{range.label}</option>
                      ))}
                    </select>
                  </div>
                </div>
          
                {hasActiveFilters && (
                  <div className="flex justify-end">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleClear}
                      className="flex items-center"
                    >
                      <X className="h-4 w-4 mr-1" />
                      Clear Filters
                    </Button>
                  </div>
                )}
              </div>
            )
          }
          
          export default JobFilters
          ---

        📄 JobForm.jsx
          ---
          import React from 'react'
          import { useForm } from 'react-hook-form'
          import { zodResolver } from '@hookform/resolvers/zod'
          import { jobSchema } from '../../utils/validation'
          import { JOB_TYPES, LOCATIONS } from '../../utils/constants'
          import Button from '../ui/Button'
          import Input from '../ui/Input'
          
          const JobForm = ({ job, onSubmit, loading = false }) => {
            const {
              register,
              handleSubmit,
              formState: { errors }
            } = useForm({
              resolver: zodResolver(jobSchema),
              defaultValues: job || {
                title: '',
                company: '',
                description: '',
                location: '',
                salary: '',
                jobType: '',
                requirements: ''
              }
            })
          
            const onFormSubmit = (data) => {
              onSubmit({
                ...data,
                salary: Number(data.salary)
              })
            }
          
            return (
              <div className="fixed inset-0 bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 bg-opacity-50 flex items-center justify-center p-4 z-50">
                <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
                  <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4">
                    <h2 className="text-2xl font-bold text-white">
                      {job ? 'Update Job' : 'Post New Job'}
                    </h2>
                  </div>
                  
                  <div className="overflow-y-auto max-h-[calc(90vh-80px)] p-6">
                    <form onSubmit={handleSubmit(onFormSubmit)} className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Input
                          label="Job Title"
                          {...register('title')}
                          error={errors.title?.message}
                          placeholder="e.g. Senior Software Engineer"
                        />
          
                        <Input
                          label="Company"
                          {...register('company')}
                          error={errors.company?.message}
                          placeholder="e.g. Tech Corp"
                        />
                      </div>
          
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Location
                          </label>
                          <select
                            {...register('location')}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                              errors.location ? 'border-red-500' : ''
                            }`}
                          >
                            <option value="">Select Location</option>
                            {LOCATIONS.map(location => (
                              <option key={location} value={location}>{location}</option>
                            ))}
                          </select>
                          {errors.location && (
                            <p className="mt-1 text-sm text-red-600">{errors.location.message}</p>
                          )}
                        </div>
          
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Job Type
                          </label>
                          <select
                            {...register('jobType')}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                              errors.jobType ? 'border-red-500' : ''
                            }`}
                          >
                            <option value="">Select Job Type</option>
                            {JOB_TYPES.map(type => (
                              <option key={type.value} value={type.value}>{type.label}</option>
                            ))}
                          </select>
                          {errors.jobType && (
                            <p className="mt-1 text-sm text-red-600">{errors.jobType.message}</p>
                          )}
                        </div>
          
                        <Input
                          label="Salary (₹)"
                          type="number"
                          {...register('salary', { valueAsNumber: true })}
                          error={errors.salary?.message}
                          placeholder="e.g. 800000"
                        />
                      </div>
          
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Job Description
                        </label>
                        <textarea
                          {...register('description')}
                          rows={6}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none ${
                            errors.description ? 'border-red-500' : ''
                          }`}
                          placeholder="Describe the job role, responsibilities, and what you're looking for..."
                        />
                        {errors.description && (
                          <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
                        )}
                      </div>
          
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Requirements
                        </label>
                        <textarea
                          {...register('requirements')}
                          rows={4}
                          className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none ${
                            errors.requirements ? 'border-red-500' : ''
                          }`}
                          placeholder="List the required skills, experience, qualifications..."
                        />
                        {errors.requirements && (
                          <p className="mt-1 text-sm text-red-600">{errors.requirements.message}</p>
                        )}
                      </div>
          
                      <div className="flex justify-end pt-4 border-t border-gray-200">
                        <Button type="submit" loading={loading} className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                          {job ? 'Update Job' : 'Post Job'}
                        </Button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            )
          }
          
          export default JobForm
          ---

      📁 ui/
        📄 Button.jsx
          ---
          import React from 'react';
          
          const Button = ({
            children,
            variant = 'primary',
            size = 'md',
            disabled = false,
            loading = false,
            className = '',
            ...props
          }) => {
            const baseClasses = 'inline-flex items-center justify-center font-semibold rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
          
          const variantClasses = {
            primary: 'bg-blue-600 text-black hover:bg-blue-700 focus:ring-blue-500 disabled:bg-blue-300',
            secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500 disabled:bg-gray-100',
            danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 disabled:bg-red-300',
            outline: 'border border-gray-300 text-black hover:bg-gray-100 focus:ring-blue-500 disabled:text-gray-400 disabled:bg-gray-50'
          };
          
            const sizeClasses = {
              sm: 'px-3 py-1.5 text-sm',
              md: 'px-4 py-2 text-sm',
              lg: 'px-6 py-3 text-base'
            };
          
            return (
              <button
                className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className} ${
                  disabled || loading ? 'cursor-not-allowed' : ''
                }`}
                disabled={disabled || loading}
                {...props}
              >
                {loading ? (
                  <div className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Loading...
                  </div>
                ) : (
                  children
                )}
              </button>
            );
          };
          
          export default Button;
          
          ---

        📄 Input.jsx
          ---
          import React from 'react'
          import { forwardRef } from 'react'
          
          const Input = forwardRef(({ 
            label,
            error,
            type = 'text',
            className = '',
            ...props 
          }, ref) => {
            return (
              <div className="mb-4">
                {label && (
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {label}
                  </label>
                )}
                <input
                  type={type}
                  ref={ref}
                  className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                    error ? 'border-red-500' : ''
                  } ${className}`}
                  {...props}
                />
                {error && (
                  <p className="mt-1 text-sm text-red-600">{error}</p>
                )}
              </div>
            )
          })
          
          Input.displayName = 'Input'
          
          export default Input
          ---

        📄 Modal.jsx
          ---
          import React from 'react'
          import { useEffect } from 'react'
          import { X } from 'lucide-react'
          
          const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
            useEffect(() => {
              if (isOpen) {
                document.body.style.overflow = 'hidden'
              } else {
                document.body.style.overflow = 'unset'
              }
              
              return () => {
                document.body.style.overflow = 'unset'
              }
            }, [isOpen])
          
            if (!isOpen) return null
          
            const sizeClasses = {
              sm: 'max-w-md',
              md: 'max-w-lg',
              lg: 'max-w-2xl',
              xl: 'max-w-4xl'
            }
          
            return (
              <div className="fixed inset-0 z-50 overflow-y-auto">
                <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
                  <div className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75">
                  
                    <div className={`inline-block w-full ${sizeClasses[size]} p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg`}>
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-900">{title}</h3>
                        <button
                          onClick={onClose}
                          className="text-gray-400 hover:text-gray-600 transition-colors"
                        >
                          <X size={20} />
                        </button>
                      </div>
                      {children}
                    </div>
                  </div>
                </div>
              </div>
            )
          }
          
          export default Modal
          ---

        📄 Spinner.jsx
          ---
          import React from 'react'
          const Spinner = ({ size = 'md', className = '' }) => {
            const sizeClasses = {
              sm: 'h-4 w-4',
              md: 'h-8 w-8',
              lg: 'h-12 w-12'
            }
          
            return (
              <div className={`animate-spin rounded-full border-2 border-gray-300 border-t-blue-600 ${sizeClasses[size]} ${className}`} />
            )
          }
          
          export default Spinner
          ---

    📁 context/
      📄 AuthContext.jsx
        ---
        import React from 'react'
        import { createContext, useContext, useReducer, useEffect } from 'react'
        import { api, setAuthToken } from '../services/api'
        
        const AuthContext = createContext()
        
        const authReducer = (state, action) => {
          switch (action.type) {
            case 'LOGIN_SUCCESS':
              return {
                ...state,
                user: action.payload.user,
                token: action.payload.token,
                isAuthenticated: true,
                loading: false
              }
            case 'LOGOUT':
              return {
                ...state,
                user: null,
                token: null,
                isAuthenticated: false,
                loading: false
              }
            case 'SET_LOADING':
              return {
                ...state,
                loading: action.payload
              }
            default:
              return state
          }
        }
        
        export const AuthProvider = ({ children }) => {
          const [state, dispatch] = useReducer(authReducer, {
            user: null,
            token: localStorage.getItem('token'),
            isAuthenticated: false,
            loading: true
          })
        
          useEffect(() => {
            const token = localStorage.getItem('token')
            if (token) {
              setAuthToken(token)
              loadUser()
            } else {
              dispatch({ type: 'SET_LOADING', payload: false })
            }
          }, [])
        
          const loadUser = async () => {
            try {
              const response = await api.get('/auth/me')
              dispatch({
                type: 'LOGIN_SUCCESS',
                payload: {
                  user: response.data.user,
                  token: localStorage.getItem('token')
                }
              })
            } catch (error) {
              localStorage.removeItem('token')
              setAuthToken(null)
              dispatch({ type: 'LOGOUT' })
            }
          }
        
          const login = async (email, password) => {
            try {
              const response = await api.post('/auth/login', { email, password })
              const { token, user } = response.data
              
              localStorage.setItem('token', token)
              setAuthToken(token)
              
              dispatch({
                type: 'LOGIN_SUCCESS',
                payload: { user, token }
              })
              
              return { success: true }
            } catch (error) {
              return { 
                success: false, 
                error: error.response?.data?.message || 'Login failed' 
              }
            }
          }
        
          const register = async (userData) => {
            try {
              const response = await api.post('/auth/register', userData)
              const { token, user } = response.data
              
              localStorage.setItem('token', token)
              setAuthToken(token)
              
              dispatch({
                type: 'LOGIN_SUCCESS',
                payload: { user, token }
              })
              
              return { success: true }
            } catch (error) {
              return { 
                success: false, 
                error: error.response?.data?.message || 'Registration failed' 
              }
            }
          }
        
          const logout = () => {
            localStorage.removeItem('token')
            setAuthToken(null)
            dispatch({ type: 'LOGOUT' })
          }
        
          return (
            <AuthContext.Provider value={{
              ...state,
              login,
              register,
              logout
            }}>
              {children}
            </AuthContext.Provider>
          )
        }
        
        export const useAuth = () => {
          const context = useContext(AuthContext)
          if (!context) {
            throw new Error('useAuth must be used within AuthProvider')
          }
          return context
        }
        ---

    📄 index.css
      ---
      @import "tailwindcss";
      
      body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
          'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
          sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      ---

    📄 main.jsx
      ---
      import React from 'react'
      import ReactDOM from 'react-dom/client'
      import App from './App.jsx'
      import './index.css'
      import { Toaster } from 'react-hot-toast'
      
      ReactDOM.createRoot(document.getElementById('root')).render(
        <React.StrictMode>
          <App />
          <Toaster position="top-right" />
        </React.StrictMode>,
      )
      ---

    📁 pages/
      📄 Dashboard.jsx
        ---
        import React from 'react'
        import { useAuth } from '../context/AuthContext'
        import { Navigate } from 'react-router-dom'
        // import AdminDashboard from '../components/dashboard/AdminDashboard'
        import EmployerDashboard from '../components/dashboard/EmployerDashboard'
        import CandidateDashboard from '../components/dashboard/CandidateDashboard'
        import Spinner from '../components/ui/Spinner'
        
        const Dashboard = () => {
          const { user, loading } = useAuth()
        
          if (loading) {
            return (
              <div className="flex justify-center items-center min-h-screen">
                <Spinner size="lg" />
              </div>
            )
          }
        
          if (!user) {
            return <Navigate to="/login" replace />
          }
        
          return (
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              {user.role === 'admin' && <AdminDashboard />}
              {user.role === 'employer' && <EmployerDashboard />}
              {user.role === 'candidate' && <CandidateDashboard />}
            </div>
          )
        }
        
        export default Dashboard
        
        
        
        ---

      📄 Home.jsx
        ---
        import React from 'react'
        import { Link } from 'react-router-dom'
        import { Search, Briefcase, Users, TrendingUp, ArrowRight } from 'lucide-react'
        import Button from '../components/ui/Button'
        
        const Home = () => {
          const features = [
            {
              icon: <Search className="h-8 w-8 text-blue-600" />,
              title: "Smart Job Search",
              description: "Find the perfect job with our advanced search filters and personalized recommendations."
            },
            {
              icon: <Briefcase className="h-8 w-8 text-blue-600" />,
              title: "Quality Opportunities",
              description: "Access curated job listings from top companies across various industries."
            },
            {
              icon: <Users className="h-8 w-8 text-blue-600" />,
              title: "Connect with Employers",
              description: "Build meaningful connections with hiring managers and recruiters."
            },
            {
              icon: <TrendingUp className="h-8 w-8 text-blue-600" />,
              title: "Career Growth",
              description: "Take the next step in your career with opportunities that match your aspirations."
            }
          ]
        
          const stats = [
            { number: "10,000+", label: "Active Jobs" },
            { number: "5,000+", label: "Companies" },
            { number: "50,000+", label: "Job Seekers" },
            { number: "95%", label: "Success Rate" }
          ]
        
          return (
            <div className="min-h-screen">
              {/* Hero Section */}
              <section className="bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800 text-white py-20">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div className="text-center">
                    <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold mb-6">
                      Find Your Dream Job
                      <span className="block text-blue-200">Today</span>
                    </h1>
                    <p className="text-xl sm:text-2xl text-blue-100 mb-8 max-w-3xl mx-auto">
                      Connect with top employers and discover opportunities that match your skills and aspirations.
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                      <Link to="/jobs">
                        <Button size="lg" className="bg-white text-blue-600 hover:bg-gray-100 min-w-[200px]">
                          Browse Jobs
                          <ArrowRight className="ml-2 h-5 w-5" />
                        </Button>
                      </Link>
                      <Link to="/register">
                        <Button 
                          size="lg" 
                          variant="outline" 
                          className="border-white text-white hover:bg-white hover:text-blue-600 min-w-[200px]"
                        >
                          Post a Job
                        </Button>
                      </Link>
                    </div>
                  </div>
                </div>
              </section>
        
              {/* Stats Section */}
              <section className="py-16 bg-white">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
                    {stats.map((stat, index) => (
                      <div key={index} className="text-center">
                        <div className="text-3xl sm:text-4xl font-bold text-blue-600 mb-2">
                          {stat.number}
                        </div>
                        <div className="text-gray-600 font-medium">{stat.label}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </section>
        
              {/* Features Section */}
              <section className="py-20 bg-gray-50">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div className="text-center mb-16">
                    <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
                      Why Choose JobBoard?
                    </h2>
                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                      We're dedicated to connecting talented professionals with amazing opportunities.
                    </p>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                    {features.map((feature, index) => (
                      <div key={index} className="bg-white rounded-lg p-6 shadow-md hover:shadow-lg transition-shadow">
                        <div className="mb-4">{feature.icon}</div>
                        <h3 className="text-xl font-semibold text-gray-900 mb-3">
                          {feature.title}
                        </h3>
                        <p className="text-gray-600">
                          {feature.description}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </section>
        
              {/* CTA Section */}
              <section className="py-20 bg-blue-600">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
                  <h2 className="text-3xl sm:text-4xl font-bold text-white mb-4">
                    Ready to Get Started?
                  </h2>
                  <p className="text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
                    Join thousands of professionals who have found their perfect job through our platform.
                  </p>
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <Link to="/register">
                      <Button 
                        size="lg" 
                        className="bg-white text-blue-600 hover:bg-gray-100 min-w-[200px]"
                      >
                        Create Account
                      </Button>
                    </Link>
                    <Link to="/jobs">
                      <Button 
                        size="lg" 
                        variant="outline" 
                        className="border-white text-white hover:bg-white hover:text-blue-600 min-w-[200px]"
                      >
                        Explore Jobs
                      </Button>
                    </Link>
                  </div>
                </div>
              </section>
            </div>
          )
        }
        
        export default Home
        ---

      📄 JobDetail.jsx
        ---
        import React from 'react'
        import { useState, useEffect } from 'react'
        import { useParams } from 'react-router-dom'
        import { jobsAPI, applicationsAPI } from '../services/api'
        import { useAuth } from '../context/AuthContext'
        import JobDetails from '../components/job/JobDetails'
        import { toast } from 'react-hot-toast'
        import Spinner from '../components/ui/Spinner'
        
        const JobDetail = () => {
          const { id } = useParams()
          const { user, isAuthenticated } = useAuth()
          const [job, setJob] = useState(null)
          const [loading, setLoading] = useState(true)
          const [hasApplied, setHasApplied] = useState(false)
        
          useEffect(() => {
            const fetchJob = async () => {
              try {
                setLoading(true)
                const response = await jobsAPI.getById(id)
                setJob(response.data.job)
              } catch (error) {
                toast.error('Failed to fetch job details')
              } finally {
                setLoading(false)
              }
            }
        
            const checkApplication = async () => {
              if (isAuthenticated && user?.role === 'candidate') {
                try {
                  const response = await applicationsAPI.getByUser(user._id)
                  const hasApplied = response.data.applications.some(
                    (app) => app.job._id === id
                  )
                  setHasApplied(hasApplied)
                } catch (error) {
                  console.error('Failed to check application:', error)
                }
              }
            }
        
            fetchJob()
            checkApplication()
          }, [id, isAuthenticated, user])
        
          const handleApply = async (job) => {
            if (!isAuthenticated) {
              toast.error('Please login to apply for jobs')
              return
            }
        
            if (user?.role !== 'candidate') {
              toast.error('Only candidates can apply for jobs')
              return
            }
        
            if (hasApplied) {
              toast.error('You have already applied for this job')
              return
            }
        
            try {
              await applicationsAPI.create({
                job: job._id,
                coverLetter: `I'm interested in the ${job.title} position at ${job.company}`
              })
              setHasApplied(true)
              toast.success('Application submitted successfully!')
            } catch (error) {
              toast.error(error.response?.data?.message || 'Failed to submit application')
            }
          }
        
          if (loading) {
            return (
              <div className="flex justify-center items-center min-h-screen">
                <Spinner size="lg" />
              </div>
            )
          }
        
          if (!job) {
            return (
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-center">
                <h1 className="text-2xl font-bold text-gray-900">Job not found</h1>
              </div>
            )
          }
        
          return (
            <JobDetails
              job={job}
              onApply={handleApply}
              canApply={isAuthenticated && user?.role === 'candidate'}
              hasApplied={hasApplied}
            />
          )
        }
        
        export default JobDetail
        ---

      📄 Jobs.jsx
        ---
        import React, { useState, useEffect } from 'react'
        import { toast } from 'react-hot-toast'
        import { useAuth } from '../context/AuthContext'
        import { jobsAPI, applicationsAPI } from '../services/api'
        import JobCard from '../components/job/JobCard'
        import JobFilters from '../components/job/JobFilters'
        import Modal from '../components/ui/Modal'
        import Button from '../components/ui/Button'
        import Spinner from '../components/ui/Spinner'
        
        const Jobs = () => {
          const { user, isAuthenticated } = useAuth()
          console.log('User:', user?.id)
        
          const [allJobs, setAllJobs] = useState([])       
          const [jobs, setJobs] = useState([])              
          const [loading, setLoading] = useState(true)
          const [filters, setFilters] = useState({
            search: '',
            location: '',
            jobType: '',
            salaryRange: ''
          })
          const [selectedJob, setSelectedJob] = useState(null)
          const [showApplicationModal, setShowApplicationModal] = useState(false)
          const [coverLetter, setCoverLetter] = useState('')
          const [applying, setApplying] = useState(false)
          const [appliedJobs, setAppliedJobs] = useState(new Set())
        
          useEffect(() => {
            fetchJobs()
            if (isAuthenticated && user?.role === 'candidate') {
              fetchUserApplications()
            }
          }, [isAuthenticated, user])
        
          useEffect(() => {
            if (!loading) {
              applyLocalFilters()
            }
          }, [filters, allJobs, loading])
        
          const fetchJobs = async () => {
            try {
              setLoading(true)
              const response = await jobsAPI.getAll()
              setAllJobs(response.data.jobs.reverse())
              setJobs(response.data.jobs.reverse())
            } catch (error) {
              console.log('Failed to fetch jobs: ', error)
            } finally {
              setLoading(false)
            }
          }
        
          const applyLocalFilters = () => {
            const filtered = allJobs.filter((job) => {
              const matchesSearch = filters.search
                ? job.title.toLowerCase().includes(filters.search.toLowerCase())
                : true
        
              const matchesLocation = filters.location
                ? job.location.toLowerCase().includes(filters.location.toLowerCase())
                : true
        
              const matchesJobType = filters.jobType
                ? job.jobType.toLowerCase() === filters.jobType.toLowerCase()
                : true
        
              const matchesSalary = filters.salaryRange
                ? job.salary >= parseInt(filters.salaryRange)
                : true
        
              return matchesSearch && matchesLocation && matchesJobType && matchesSalary
            })
        
            setJobs(filtered.reverse())
          }
        
          const fetchUserApplications = async () => {
            try {
              const response = await applicationsAPI.getByUser(user.id)
              const jobIds = new Set(response.data.applications.map(app => app.job.id))
              setAppliedJobs(jobIds)
            } catch (error) {
              console.error('Failed to fetch user applications:', error)
            }
          }
        
          const handleFiltersChange = (newFilters) => {
            setFilters(newFilters)
          }
        
          const handleClearFilters = () => {
            setFilters({
              search: '',
              location: '',
              jobType: '',
              salaryRange: ''
            })
          }
        
          const handleApply = (job) => {
            if (!isAuthenticated) {
              toast.error('Please login to apply for jobs')
              return
            }
        
            if (user?.role !== 'candidate') {
              toast.error('Only candidates can apply for jobs')
              return
            }
        
            if (appliedJobs.has(job._id)) {
              toast.error('You have already applied for this job')
              return
            }
        
            setSelectedJob(job)
            setShowApplicationModal(true)
          }
        
          const handleSubmitApplication = async () => {
            if (!coverLetter.trim()) {
              toast.error('Please write a cover letter')
              return
            }
        
            try {
              setApplying(true)
              await applicationsAPI.create({
                job: selectedJob.id,
                coverLetter: coverLetter.trim()
              })
        
              setAppliedJobs(prev => new Set([...prev, selectedJob.id]))
              setShowApplicationModal(false)
              setCoverLetter('')
              setSelectedJob(null)
              toast.success('Application submitted successfully!')
            } catch (error) {
              toast.error(error.response?.data?.message || 'Failed to submit application')
            } finally {
              setApplying(false)
            }
          }
        
          const handleCloseModal = () => {
            setShowApplicationModal(false)
            setCoverLetter('')
            setSelectedJob(null)
          }
        
          return (
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              <div className="mb-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-2">Find Jobs</h1>
                <p className="text-gray-600">
                  Discover your next career opportunity from thousands of job listings.
                </p>
              </div>
        
              <JobFilters
                filters={filters}
                onFiltersChange={handleFiltersChange}
                onClear={handleClearFilters}
              />
        
              {loading ? (
                <div className="flex justify-center items-center py-12">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <div className="mb-6">
                    <p className="text-gray-600">
                      {jobs.filter((element) =>element.userId != user?.id).length} job{jobs.length !== 1 ? 's' : ''} found
                    </p>
                  </div>
        
                  {jobs.length === 0 ? (
                    <div className="text-center py-12">
                      <div className="text-gray-500 mb-4">
                        <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                        <h3 className="mt-2 text-lg font-medium text-gray-900">No jobs found</h3>
                        <p className="mt-1 text-gray-500">Try adjusting your search filters</p>
                      </div>
                      <Button variant="outline" onClick={handleClearFilters}>
                        Clear all filters
                      </Button>
                    </div>
                  ) : (
        
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {jobs.filter((element) =>element.userId != user?.id).map(job => (
                        <JobCard
                          key={job.id}
                          job={job}
                          onApply={handleApply}
                          showApplyButton={appliedJobs.has(job.id) ? false : true}
                          applied={appliedJobs.has(job.id)}
                        />
                      ))}
                    </div>
                  )}
                </>
              )}
        
              <Modal
                isOpen={showApplicationModal}
                onClose={handleCloseModal}
                title={`Apply for ${selectedJob?.title}`}
              >
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Cover Letter
                    </label>
                    <textarea
                      value={coverLetter}
                      onChange={(e) => setCoverLetter(e.target.value)}
                      rows={8}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Explain why you're a good fit for this position..."
                    />
                  </div>
                  <div className="flex justify-end space-x-3">
                    <Button variant="outline" onClick={handleCloseModal} disabled={applying}>
                      Cancel
                    </Button>
                    <Button onClick={handleSubmitApplication} loading={applying}>
                      Submit Application
                    </Button>
                  </div>
                </div>
              </Modal>
            </div>
          )
        }
        
        export default Jobs
        
        ---

      📄 Login.jsx
        ---
        import React from 'react'
        import { useForm } from 'react-hook-form'
        import { zodResolver } from '@hookform/resolvers/zod'
        import { useAuth } from '../context/AuthContext'
        import { loginSchema } from '../utils/validation'
        import { Link, useNavigate } from 'react-router-dom'
        import Input from '../components/ui/Input'
        import Button from '../components/ui/Button'
        import { toast } from 'react-hot-toast'
        
        const Login = () => {
          const { login } = useAuth()
          const navigate = useNavigate()
          const {
            register,
            handleSubmit,
            formState: { errors }
          } = useForm({
            resolver: zodResolver(loginSchema)
          })
        
          const onSubmit = async (data) => {
            const { success, error } = await login(data.email, data.password)
            if (success) {
              toast.success('Login successful!')
              navigate('/dashboard')
            } else {
              toast.error(error)
            }
          }
        
          return (
            <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
              <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                  Sign in to your account
                </h2>
                <p className="mt-2 text-center text-sm text-gray-600">
                  Or{' '}
                  <Link
                    to="/register"
                    className="font-medium text-blue-600 hover:text-blue-500"
                  >
                    create a new account
                  </Link>
                </p>
              </div>
        
              <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                  <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
                    <Input
                      label="Email address"
                      type="email"
                      {...register('email')}
                      error={errors.email?.message}
                    />
        
                    <Input
                      label="Password"
                      type="password"
                      {...register('password')}
                      error={errors.password?.message}
                    />
        
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <input
                          id="remember-me"
                          name="remember-me"
                          type="checkbox"
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <label
                          htmlFor="remember-me"
                          className="ml-2 block text-sm text-gray-900"
                        >
                          Remember me
                        </label>
                      </div>
        
                      <div className="text-sm">
                        <Link
                          to="/forgot-password"
                          className="font-medium text-blue-600 hover:text-blue-500"
                        >
                          Forgot your password?
                        </Link>
                      </div>
                    </div>
        
                    <div>
                      <Button type="submit" className="w-full">
                        Sign in
                      </Button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          )
        }
        
        export default Login
        ---

      📄 Register.jsx
        ---
        import React from 'react'
        import { useForm } from 'react-hook-form'
        import { zodResolver } from '@hookform/resolvers/zod'
        import { useAuth } from '../context/AuthContext'
        import { registerSchema } from '../utils/validation'
        import { Link, useNavigate } from 'react-router-dom'
        import Input from '../components/ui/Input'
        import Button from '../components/ui/Button'
        import { USER_ROLES } from '../utils/constants'
        import { toast } from 'react-hot-toast'
        
        const Register = () => {
          const { register: registerUser } = useAuth()
          const navigate = useNavigate()
          const {
            register,
            handleSubmit,
            formState: { errors }
          } = useForm({
            resolver: zodResolver(registerSchema)
          })
        
          const onSubmit = async (data) => {
            const { success, error } = await registerUser(data)
            if (success) {
              toast.success('Registration successful!')
              navigate('/dashboard')
            } else {
              toast.error(error)
            }
          }
        
          return (
            <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
              <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                  Create a new account
                </h2>
                <p className="mt-2 text-center text-sm text-gray-600">
                  Or{' '}
                  <Link
                    to="/login"
                    className="font-medium text-blue-600 hover:text-blue-500"
                  >
                    sign in to your existing account
                  </Link>
                </p>
              </div>
        
              <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                  <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
                    <Input
                      label="Full name"
                      {...register('name')}
                      error={errors.name?.message}
                    />
        
                    <Input
                      label="Email address"
                      type="email"
                      {...register('email')}
                      error={errors.email?.message}
                    />
        
                    <Input
                      label="Password"
                      type="password"
                      {...register('password')}
                      error={errors.password?.message}
                    />
        
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Role
                      </label>
                      <select
                        {...register('role')}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                          errors.role ? 'border-red-500' : ''
                        }`}
                      >
                        <option value="">Select your role</option>
                        {USER_ROLES.map((role) => (
                          <option key={role.value} value={role.value}>
                            {role.label}
                          </option>
                        ))}
                      </select>
                      {errors.role && (
                        <p className="mt-1 text-sm text-red-600">
                          {errors.role.message}
                        </p>
                      )}
                    </div>
        
                    <div>
                      <Button type="submit" className="w-full">
                        Register
                      </Button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          )
        }
        
        export default Register
        ---

    📁 services/
      📄 api.js
        ---
        import axios from 'axios'
        
        const API_URL = 'http://localhost:5000/api'
        
        export const api = axios.create({
          baseURL: API_URL,
          headers: {
            'Content-Type': 'application/json'
          }
        })
        
        export const setAuthToken = (token) => {
          if (token) {
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`
          } else {
            delete api.defaults.headers.common['Authorization']
          }
        }
        
        api.interceptors.response.use(
          (response) => response,
          (error) => {
            if (error.response?.status === 401) {
              localStorage.removeItem('token')
              setAuthToken(null)
              window.location.href = '/login'
            }
            return Promise.reject(error)
          }
        )
        
        export const jobsAPI = {
          // getAll: (params) => api.get('/jobs', { params }),
          getAll: () => api.get('/jobs'),
          getById: (id) => api.get(`/jobs/${id}`),
          create: (data) => api.post('/jobs', data),
          update: (id, data) => api.put(`/jobs/${id}`, data),
          delete: (id) => api.delete(`/jobs/${id}`),
          approve: (id) => api.patch(`/jobs/${id}/approve`)
        }
        
        export const applicationsAPI = {
          create: (data) => api.post('/applications', data),
          getByUser: (userId) => api.get(`/applications/user/${userId}`),
          getByJob: (jobId) => api.get(`/applications/job/${jobId}`)
        }
        
        export const usersAPI = {
          getAll: () => api.get('/users'),
          delete: (id) => api.delete(`/users/${id}`)
        }
        ---

    📁 utils/
      📄 constants.js
        ---
        export const JOB_TYPES = [
          { value: 'full-time', label: 'Full Time' },
          { value: 'part-time', label: 'Part Time' },
          { value: 'remote', label: 'Remote' }
        ]
        
        export const USER_ROLES = [
          { value: 'candidate', label: 'Candidate' },
          { value: 'employer', label: 'Employer' }
        ]
        
        export const SALARY_RANGES = [
          { value: '', label: 'Any Salary' },
          { value: '0-50000', label: '₹0 - ₹50,000' },
          { value: '50000-100000', label: '₹50,000 - ₹1,00,000' },
          { value: '100000-500000', label: '₹1,00,000 - ₹5,00,000' },
          { value: '500000+', label: '₹5,00,000+' }
        ]
        
        export const LOCATIONS = [
          'Bangalore',
          'Mumbai',
          'Delhi',
          'Hyderabad',
          'Chennai',
          'Pune',
          'Kolkata',
          'Ahmedabad'
        ]
        ---

      📄 validation.js
        ---
        import { z } from 'zod'
        
        export const loginSchema = z.object({
          email: z.string().email('Invalid email format'),
          password: z.string().min(1, 'Password is required')
        })
        
        export const registerSchema = z.object({
          name: z.string().min(2, 'Name must be at least 2 characters'),
          email: z.string().email('Invalid email format'),
          password: z.string()
            .min(8, 'Password must be at least 8 characters')
            .regex(/[!@#$%^&*(),.?":{}|<>]/, 'Password must contain at least one special character'),
          role: z.enum(['candidate', 'employer'], 'Please select a role')
        })
        
        export const jobSchema = z.object({
          title: z.string().min(3, 'Job title must be at least 3 characters'),
          company: z.string().min(2, 'Company name must be at least 2 characters'),
          description: z.string().min(50, 'Description must be at least 50 characters'),
          location: z.string().min(2, 'Location is required'),
          salary: z.number().min(0, 'Salary must be a positive number'),
          jobType: z.enum(['full-time', 'part-time', 'remote'], 'Please select a job type'),
          requirements: z.string().min(20, 'Requirements must be at least 20 characters')
        })
        
        export const applicationSchema = z.object({
          coverLetter: z.string().min(50, 'Cover letter must be at least 50 characters')
        })
        ---

  📄 vite.config.js
    ---
    import { defineConfig } from 'vite'
    import tailwindcss from '@tailwindcss/vite'
    export default defineConfig({
      plugins: [
        tailwindcss(),
      ],
    })
    ---


# Snapshot Summary
Total files processed: 63
